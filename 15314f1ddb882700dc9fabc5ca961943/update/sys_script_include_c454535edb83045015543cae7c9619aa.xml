<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_illu2_illumio.IllumioManageJobs</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <mobile_callable>false</mobile_callable>
        <name>IllumioManageJobs</name>
        <sandbox_callable>true</sandbox_callable>
        <script><![CDATA[var IllumioManageJobs = Class.create();
IllumioManageJobs.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

    /* 
     * Check jobs status and create new scheduled job for data syncing
     * @return {String} sysId of scheduled job.
     */
    createScheduledJob: function() {
        var configSysId = this.getParameter("sysparm_config_sys_id");
        var userName = gs.getUser().getID();
        var count = 0,
            logs = '',
            job_type = '';
        var scheduledJobGr = new GlideRecord('x_illu2_illumio_illumio_scheduled_jobs');
        scheduledJobGr.initialize();

        /* Check if any data collection is already in running state */
        var runningJobsCount = new GlideAggregate("x_illu2_illumio_illumio_scheduled_jobs");
        var queryString = 'job_type=data collection^job_status=running';
        runningJobsCount.addEncodedQuery(queryString);
        runningJobsCount.addAggregate('COUNT');
        runningJobsCount.addQuery("illumio_pce_configuration", configSysId);
        runningJobsCount.query();
        if (runningJobsCount.next()) {
            scheduledJobGr.job_owner = userName;
            scheduledJobGr.job_type = this.getParameter('sysparm_job_type');
            scheduledJobGr.job_started = new GlideDateTime();
            if (runningJobsCount.getAggregate('COUNT') > 0) {
                return null;
            } else {
                /* Create scheduled job */
                scheduledJobGr.job_status = this.getParameter('sysparm_job_status');
                scheduledJobGr.current_operation = this.getParameter('sysparm_current_operation');
                scheduledJobGr.illumio_pce_configuration = configSysId;
                job_type = this.getParameter('sysparm_type_flag');
                if (job_type == 'true') {
                    count = this.getParameter('sysparm_count');
                    logs += '[' + new Date(new GlideDateTime().getNumericValue()).toISOString() + '] Total critical label groups fetched : ' + parseInt(count) +'\n';
                }
                logs += '[' + new Date(new GlideDateTime().getNumericValue()).toISOString() + '] ' + this.getParameter('sysparm_logs');

                var thresoldLogs = this.getParameter('sysparm_thresold_logs');
                if (!gs.nil(thresoldLogs))
                    logs += '\n[' + new Date(new GlideDateTime().getNumericValue()).toISOString() + '] ' + thresoldLogs;
                scheduledJobGr.logs = logs;
                return scheduledJobGr.insert();
            }
        }
    },

    type: 'IllumioManageJobs'

});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-02-21 05:28:20</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>c454535edb83045015543cae7c9619aa</sys_id>
        <sys_mod_count>54</sys_mod_count>
        <sys_name>IllumioManageJobs</sys_name>
        <sys_package display_value="Illumio" source="x_illu2_illumio">15314f1ddb882700dc9fabc5ca961943</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Illumio">15314f1ddb882700dc9fabc5ca961943</sys_scope>
        <sys_update_name>sys_script_include_c454535edb83045015543cae7c9619aa</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-04-09 10:22:46</sys_updated_on>
    </sys_script_include>
</record_update>
