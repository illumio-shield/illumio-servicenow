<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="ecc_agent_script_include">
    <ecc_agent_script_include action="INSERT_OR_UPDATE">
        <active>true</active>
        <description>To manage async PCE REST API calls</description>
        <name>IllumioManageAsyncJobs</name>
        <script><![CDATA[ms.include("IllumioMIDConstants");

var IllumioManageAsyncJobs = Class.create();

IllumioManageAsyncJobs.prototype = {
    initialize: function() {

        // set the parameters here
        this.logger = new IllumioLogUtil();
        this._fallbackDefaultBatchSize = 1000;
        var url = String(ms.getConfigParameter("url"));
        if (url.charAt(url.length - 1) == '/') {
            url = url.substring(0, url.length - 1);
        }
        this.snowUrl = url;
        this.snowUsername = ms.getConfigParameter("mid.instance.username");
        this.snowPassword = ms.getConfigParameter("mid.instance.password");

        this.pceUrl = probe.getParameter('glide.jms.pce_url');
        this.pceEndpoint = probe.getParameter('glide.jms.pce_endpoint');
        this.pceAuthorization = probe.getParameter('glide.jms.pce_authorization');
        this.currentJobSysID = probe.getParameter('glide.jms.pce_async_job_sys_id') + '';
        this.pceMIDProxy = probe.getParameter('glide.jms.enable_pce_mid_proxy');
        this.batchSize = probe.getParameter('glide.jms.chunk_size');
        this.batchSize = parseInt(this.batchSize, 10) || this._fallbackDefaultBatchSize;
        if (this.batchSize < 1) {
            this.logger._warning(
				"Invalid 'x_illu2_illumio.payload.batch.size' provided. Proceeding with " 
				+ this._fallbackDefaultBatchSize 
				+ " as default value. Please set a valid value to 'x_illu2_illumio.payload.batch.size' property."
			);
            this.batchSize = this._fallbackDefaultBatchSize;
        }

        this.timeZone = probe.getParameter('glide.jms.time_zone');
        this.SimpleDF = Packages.java.text.SimpleDateFormat;
        this.TimeZone = Packages.java.util.TimeZone;

        this.snowDateFormat = this.SimpleDF("yyyy-MM-dd HH:mm:ss");
        this.illumioDateFormat = this.SimpleDF("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");

        this.snowDateFormat.setTimeZone(this.TimeZone.getTimeZone('GMT'));
        this.illumioDateFormat.setTimeZone(this.TimeZone.getTimeZone('UTC'));

        this.utils = new IllumioPCEUtils(this.timeZone);

        this.protocol = this.utils.getPortFromUrl(this.pceUrl);

        this.retryParams = DEFAULT_RETRY_PARAMS;
        try {
            this.retryParams = JSON.parse(probe.getParameter('glide.jms.retry_params'));
        } catch (e) {
            this.logger._except('IllumioManageAsyncJobs - Cannot parse the JSON of retry parameters');
        }

        var decodedAuth = this.utils.decodeBase64(this.pceAuthorization);
        decodedAuth = decodedAuth.split(":");
        this.pceUsername = decodedAuth[0];
        this.pcePassword = decodedAuth.slice(1).join(':');

        this.pceHttpClient = new IllumioHTTPClient(this.pceUrl, this.pceUsername, this.pcePassword, this.protocol, this.pceMIDProxy, this.retryParams);
        this.snHttpClient = new IllumioHTTPClient(this.snowUrl, this.snowUsername, this.snowPassword, "443", null, this.retryParams);
        this.illumio_jobId = probe.getParameter("glide.jms.illumio_scheduled_job_id");
    },

    run: function() {

        if (
            this.utils.checkCancelledJobStatus(this.illumio_jobId, this.snowUrl, this.snowUsername, this.snowPassword)
        ) {
            return;
        }

        this.requiredOperation = probe.getParameter('glide.jms.operation');
        this.configSysId = probe.getParameter('glide.jms.illumio_pce_configuration_id');

        // perform required async job operation
        if (this.requiredOperation == 'create_async_job') {
            this.logger._info('IllumioManageAsyncJobs --------- Creating new async job on PCE');
            this.createNewAsyncJobRequest();

        } else if (this.requiredOperation == 'get_async_job_status') {
            this.logger._info('IllumioManageAsyncJobs - Getting async job status from PCE');
            this.getAsyncJobStatus(this.configSysId);

        } else {
            this.logger._error('IllumioManageAsyncJobs - No async operation provided.');
        }
    },

    /**
     * Start async job on PCE
     * @return {Boolean} whether async job was created successfully or not.
     */
    createNewAsyncJobRequest: function() {

        try {
            // Required header to indicate async job
            var headers = {
                Prefer: 'respond-async'
            };

            if (this.utils.checkCancelledJobStatus(this.illumio_jobId, this.snowUrl, this.snowUsername, this.snowPassword)) {
                return;
            }

            // getting all workloads
            var response = this.pceHttpClient.get(this.pceEndpoint, '', headers);

            if (response.hasError) {
                this.logger._error("Failed to create async job on PCE.");
                this.handleException("Failed to create async job on PCE, Please check MID server logs for more details");
                return false;
            }

            var responseHeaders = response.headers;
            for (var key in responseHeaders) {
                responseHeaders[key.toLowerCase()] = responseHeaders[key];
            }
            // Async job data to be stored in Async Jobs table
            var payload = {
                job_location: responseHeaders.location,
                job_status: 'new',
                retry_interval: responseHeaders['retry-after'],
                mapping_table_name: probe.getParameter('glide.jms.mapping_table_name'),
                result_table_name: probe.getParameter('glide.jms.result_table_name'),
                keys_to_map: probe.getParameter('glide.jms.keys_to_map'),
                primary_key_to_map: probe.getParameter('glide.jms.primary_key_to_map'),
                illumio_job_id: probe.getParameter('glide.jms.illumio_scheduled_job_id'),
                job_identifier: probe.getParameter('glide.jms.job_identifier')
            };

            if (this.utils.checkCancelledJobStatus(this.illumio_jobId, this.snowUrl, this.snowUsername, this.snowPassword)) {
                return;
            }

            /*var post = */
            var endpoint = TABLE_API + ASYNC_JOB_TABLE;
            response = this.snHttpClient.post(endpoint, '', null, payload);

            if (response.hasError) {
                this.logger._error("Failed to create async job on SNOW, Response Code: " + response.status);
                this.handleException("Failed to create async job on SNOW, Please check MID server logs for more details.");
                return false;
            }
        } catch (exception) {
            this.logger._except('IllumioManageAsyncJobs - Exception occurred while creating async job on PCE. Exception: ' + exception);
            this.handleException('Exception occurred while creating async job on PCE. Exception: ' + exception);
        }

    },

    /**
     * Get status of async job running on PCE
     * @return {Boolean} whether status was successful or not.
     */
    getAsyncJobStatus: function(configSysId) {

        try {
            var jobStatus = 'failed';
            var resultUrl = '';
            var isResultsAvailable = false;


            if (this.utils.checkCancelledJobStatus(this.illumio_jobId, this.snowUrl, this.snowUsername, this.snowPassword)) {
                return;
            }

            var response = this.pceHttpClient.get(this.pceEndpoint, '');

            if (response.hasError) {
                this.logger._error('Exception occurred while getting async job status from PCE, Response Code: ' + response.status);
                this.handleException('Exception occurred while getting async job status from PCE, Please check MID server logs for more details.');
                return false;
            }
            jobStatus = response.data.status.toLowerCase();
            this.logger._debug('IllumioManageAsyncJobs - Job status: ' + jobStatus);

            // If job status is done, get result's href
            if (jobStatus == 'done') {

                resultUrl = response.data.result.href;

                if (!resultUrl) {
                    this.logger._error('IllumioManageAsyncJobs - Job completed but datafiles url is not present in response. Setting job status to failed.');
                    jobStatus = 'failed';
                } else {
                    isResultsAvailable = this.getAsyncJobResults(resultUrl, configSysId);
                }
            }

            // Results are available and stored in mapping tables
            // Set status to 'ready_to_map' to indicate getting CMDB servers and map with PCE data
            if (isResultsAvailable) {
                jobStatus = 'ready_to_map';
            }

            var payload = {
                job_status: jobStatus,
                job_result_location: resultUrl,
                retry_count: parseInt(probe.getParameter('glide.jms.retry_count')) + 1
            };

            var endpoint = TABLE_API + ASYNC_JOB_TABLE + "/" + this.currentJobSysID;
            response = this.snHttpClient.put(endpoint, '', null, payload);

            if (response.hasError) {
                this.logger._error('Exception occurred while updating async job status in SNOW, Response Code: ' + response.status);
                this.handleException('Exception occurred while updating async job status on SNOW, Please check MID server logs for more details.');
                return false;
            }

        } catch (exception) {
            this.logger._except('IllumioManageAsyncJobs - Exception occurred while getting async job status from PCE. Exception: ' + exception);
            this.handleException('Exception occurred while getting async job status from PCE. Exception: ' + exception);
        }
    },

    /**
     * Get results of async jobs from result location
     * @param {String} resultsLocation location of the result.
     * @return {Boolean} whether request was successful or not.
     */
    getAsyncJobResults: function(resultsLocation, configSysId) {

        try {


            if (this.utils.checkCancelledJobStatus(this.illumio_jobId, this.snowUrl, this.snowUsername, this.snowPassword)) {
                return;
            }

            this.logger._info('IllumioManageAsyncJobs - Getting async job results');

            var response = this.pceHttpClient.get('/api/v2' + resultsLocation, '');

            if (response.hasError) {
                this.logger._error('No results received from PCE for current async job, Response status: ' + response.status);
                this.handleException('No results received from PCE for current async job, Please check MID server logs for more details.');
                return false;
            }

            // Required keys
            var resultTable = probe.getParameter('glide.jms.result_table_name');
            var job_identifier = probe.getParameter('glide.jms.job_identifier');
            var keysToMap = JSON.parse(probe.getParameter('glide.jms.keys_to_map'));
            var scheduled_job_id = probe.getParameter('glide.jms.illumio_scheduled_job_id');
            var primaryKey = probe.getParameter('glide.jms.primary_key');

            if (!resultTable || !keysToMap || !primaryKey) {
                this.logger._error('IllumioManageAsyncJobs - Missing result table or columns of result table or primary key. Setting job status to failed.');
                this.handleException('Missing result table or columns of result table or primary key. Setting job status to failed');
                return false;
            }

            if (!Array.isArray(response.data)) {
                this.logger._error('IllumioManageAsyncJobs - Invalid data.');
                this.handleException('Invalid data format received. Setting job status to failed');
                return false;
            }
            // Data will be array of objects

            var resultData = [];
            response.data = JSON.parse(JSON.stringify(response.data));
            response.data.map(function(resultObj) {

                if (resultObj[primaryKey]) {
                    var requredDataObj = {};
                    keysToMap.map(function(key) {
                        if (key == 'agent') {
                            var agent = resultObj[key];
                            if (agent['href'])
                                requredDataObj[key] = true;
                            else
                                requredDataObj[key] = false;
                        } else if (key == "interfaces") {
                            var interfaceRequiredFields = [];
                            var interfaceLength = resultObj[key].length;
                            for (var indexForInterface = 0; indexForInterface < interfaceLength; indexForInterface++) {
                                var IPObject = {};
                                IPObject["name"] = resultObj[key][indexForInterface].name;
                                IPObject["address"] = resultObj[key][indexForInterface].address;
                                interfaceRequiredFields.push(IPObject);
                            }
                            requredDataObj[key] = JSON.stringify(interfaceRequiredFields);

                        } else {
                            requredDataObj[key] = typeof resultObj[key] == 'object' ? JSON.stringify(resultObj[key]) : resultObj[key] + "";
                        }
                    });
                    resultData.push(requredDataObj);
                }
            });

            var resultLength = resultData.length;
            this.logger._debug('IllumioManageAsyncJobs - Total records : ' + resultLength + ", will be broken down into batches of " + this.batchSize);

            var jobContent = {
                logs: 'Total ' + job_identifier + ' fetched : ' + resultLength
            };
            this._updateJobRecord(scheduled_job_id, jobContent);

            if (this.utils.checkCancelledJobStatus(this.illumio_jobId, this.snowUrl, this.snowUsername, this.snowPassword)) {
                return;
            }
            // add 1 more iteration count in case the 'resultLength' is exactly divisible by 'batchSize'
            var iterations = (resultLength / this.batchSize) + 1;

            // extra check on 'resultData' length as it gets shorter everytime the chunked payload is sent
            for (var iter = 0; iter < iterations && resultData.length != 0; iter++) {
                var payload = {
                    illumio_pce_configuration: configSysId,
                    json_data: JSON.stringify(resultData.splice(0, this.batchSize)),
                    // splice would update the source array, hence we always start from 0
                };
                this.logger._debug("Proceeding to write the payload of " + job_identifier + " from index " + (iter * this.batchSize) + " to " + ((iter + 1) * this.batchSize));
                var endpoint = TABLE_API + resultTable;
                var resp = this.snHttpClient.post(endpoint, '', null, payload);
                if (resp.hasError) {
                    this.logger._error('Cannot insert the data in staging table');
                    this.handleException(
                        'Exception occurred while posting results to SNOW, Please check MID server logs for more details.'
                    );
                    return false;
                }
				this.logger._debug("Pending " + job_identifier + " to be written:" + resultData.length);
            }
            this.logger._info('IllumioManageAsyncJobs - Posted all records to SNOW');
            return true;

        } catch (exception) {
            this.logger._except('IllumioManageAsyncJobs - Exception occurred while getting async job results. Exception: ' + exception);
            this.handleException('Exception occurred while getting async job results. Exception: ' + exception);
            return false;
        }
    },

    /**
     * Handles exception by logging and setting job status as failed
     * @param {String} exception thrown by methods.
     */
    handleException: function(exception) {

        payload = {
            job_status: 'failed'
        };
        this.snHttpClient.put(TABLE_API + ASYNC_JOB_TABLE + "/" + this.jobId, '', null, payload);

        var illumio_job_id = probe.getParameter('glide.jms.illumio_scheduled_job_id');
        if (illumio_job_id) {
            var payload = {
                job_status: 'failed',
                logs: exception,
                job_completed: this.snowDateFormat.format(new Date()) + ""
            };
            this._updateJobRecord(illumio_job_id, payload);
        }
    },

    /**
     * Updates scheduled job record with given parameters
     * 
     * @param {String} jobId sys_id of the job record
     * @param {String} content of job
     * 
     */
    _updateJobRecord: function(jobSysId, jobContent) {

        var snowGetUrl =
            TABLE_API +
            SCHEDULED_JOB_TABLE +
            '?sysparm_fields=logs&sysparm_query=sys_id=' +
            jobSysId;

        var putUrl =
            TABLE_API + SCHEDULED_JOB_TABLE + '/' + jobSysId;

        var response = this.snHttpClient.get(snowGetUrl, '');
        if (response.data.result.length == 0) {
            this.logger._error(
                '[run] Error while checking status of given job on ServiceNow. Proceeding with further actions.'
            );
            return;
        }

        var jobRecord = response.data.result[0];

        if (response.hasError) {
            return false;
        } else if (jobRecord.job_status == 'cancelled') {
            return true;
        }

        if (jobRecord.job_status != 'failed') {

            for (var key in jobContent) {
                if (jobContent.hasOwnProperty(key)) {
                    if (key != 'logs') {
                        jobRecord[key] = jobContent[key];
                    } else {
                        jobRecord["logs"] = jobRecord["logs"].replaceAll("\\n", "\n");
                        jobRecord["logs"] += '\n' + '[' + this.illumioDateFormat.format(new Date()) + ']' + jobContent["logs"];

                    }
                }
            }
            jobRecord["illumio_pce_configuration"] = jobRecord.illumio_pce_configuration.value;
            var putResponse = this.snHttpClient.put(
                putUrl,
                '',
                null,
                jobRecord
            );
            if (putResponse.hasError) {
                return false;
            } else {
                this.logger._info(
                    'The Scheduled Job had updated the values with the logs'
                );
            }
        } else {
            this.logger._info(
                '[_updateJobRecord] Given job is invalidated. Aborting further actions.'
            );
        }
    },

    type: "IllumioUpdateKnownWorkloads"
};]]></script>
        <sys_class_name>ecc_agent_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-08-22 08:29:35</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_id>63973142db8c6700dc9fabc5ca961947</sys_id>
        <sys_mod_count>87</sys_mod_count>
        <sys_name>IllumioManageAsyncJobs</sys_name>
        <sys_overrides/>
        <sys_package display_value="Illumio" source="x_illu2_illumio">15314f1ddb882700dc9fabc5ca961943</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Illumio">15314f1ddb882700dc9fabc5ca961943</sys_scope>
        <sys_update_name>ecc_agent_script_include_63973142db8c6700dc9fabc5ca961947</sys_update_name>
        <sys_updated_by>hetang.modi</sys_updated_by>
        <sys_updated_on>2025-01-29 09:45:08</sys_updated_on>
    </ecc_agent_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>63973142db8c6700dc9fabc5ca961947</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-11-21 07:15:10</sys_created_on>
        <sys_id>c4ece23cdbca5e502fcecafc139619cb</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-11-21 07:15:10</sys_updated_on>
        <table>ecc_agent_script_include</table>
        <use_es_latest>false</use_es_latest>
    </sys_es_latest_script>
</record_update>
