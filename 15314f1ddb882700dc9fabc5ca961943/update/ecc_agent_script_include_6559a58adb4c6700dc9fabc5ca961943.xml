<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="ecc_agent_script_include">
    <ecc_agent_script_include action="INSERT_OR_UPDATE">
        <active>true</active>
        <description>Wrapper for various HTTP calls to SNOW and PCE</description>
        <name>IllumioHTTPClient</name>
        <script><![CDATA[ms.include('IllumioHttpIncludes');
ms.include('IllumioMIDConstants');

var IllumioHTTPClient = Class.create();
IllumioHTTPClient.prototype = {
    initialize: function(baseUrl, username, password, protocol, pceMIDProxy, retryParams) {
        this.logger = new IllumioLogUtil();
        this.baseUrl = baseUrl;
        var proxyFlag = (pceMIDProxy == 'true' || pceMIDProxy == '1' || pceMIDProxy == true || pceMIDProxy == null);
        // we'll skip the logs when creating object for 'snHttpClient'
        var skipLogs = pceMIDProxy == null;
        this.client = this._setupClient(baseUrl, username, password, protocol, proxyFlag, skipLogs);
        this.httpRetryCount = retryParams.http_retry_count;
        this.httpRetryIntervalIncrement = retryParams.http_retry_interval_increment;
        this.httpRetryIntervalMax = retryParams.http_retry_interval_max;
    },

    /**
     * Setup the HTTP client
     * @param {string} baseUrl Base URL of the REST API
     * @param {string} username Username for the REST API
     * @param {string} password Password for the REST API
     * @param {string} protocol Protocol to use for the REST API
     * @param {boolean} proxyFlag Flag to indicate if the proxy should be used
     * @returns {HttpClient} HTTP client
     **/
    _setupClient: function(baseUrl, username, password, protocol, proxyFlag, skipLogs) {
        var client = new HttpClient();
        var authScope = new AuthScope(baseUrl, protocol);
        var credentials = new UsernamePasswordCredentials(username, password);
        client.getParams().setAuthenticationPreemptive(true);
        client.getState().setCredentials(authScope.ANY, credentials);
        var proxy = this._getProxy(proxyFlag, skipLogs);
        if (proxy != null) {
            client.getHostConfiguration().setProxy(proxy.host, proxy.port);
            client.getParams().setAuthenticationPreemptive(true);
            if (proxy.username != null && proxy.password != null) {
                // set the authentication only when username & password aren't null
                client.getState().setProxyCredentials(new AuthScope(proxy.host, proxy.port), new UsernamePasswordCredentials(proxy.username, proxy.password));
            }
        }
        return client;
    },

    /**
     * Get the proxy details
     * @param {boolean} proxyFlag Flag to indicate if the proxy should be used
     * @param {boolean} skipLogs Flag to skip duplicate logs on creation of HTTPClient
     * @returns {object} Proxy details
     **/
    _getProxy: function(proxyFlag, skipLogs) {
        var proxy = null;
        if (ms.getConfigParameter('mid.proxy.use_proxy') != 'true' && proxyFlag) {
            if (!skipLogs) {
                this.logger._warning('Proxy is not configured on MID Server and enabled for connecting to PCE. Please either configure Proxy in MID Server or uncheck the "Enable Proxy between PCE and MID server" checkbox in configuration.');
            }
            return proxy; // null
        } else if (ms.getConfigParameter('mid.proxy.use_proxy') != 'true' && !proxyFlag) {
            if (!skipLogs) {
                this.logger._debug('Proxy is not configured on MID Server and disabled for connecting to PCE. Continuing without proxy to connect with PCE and ServiceNow instance.');
            }
            return proxy; // null
        } else if (ms.getConfigParameter('mid.proxy.use_proxy') == 'true' && proxyFlag) {
            if (!skipLogs) {
                this.logger._debug('Proxy is configured on MID Server and enabled for connecting to PCE. Proceeding to use proxy to connect with PCE and ServiceNow instance.');
            }
            var proxyHost = ms.getConfigParameter('mid.proxy.host');
            var proxyPort = ms.getConfigParameter('mid.proxy.port');
            var proxyUsername = ms.getConfigParameter('mid.proxy.username');
            var proxyPassword = ms.getConfigParameter('mid.proxy.password');
            proxy = {
                host: proxyHost,
                port: proxyPort,
                username: proxyUsername,
                password: proxyPassword
            };
            return proxy; // non-null
        } else if (ms.getConfigParameter('mid.proxy.use_proxy') == 'true' && !proxyFlag) {
            if (!skipLogs) {
                this.logger._debug('Proxy is configured on MID Server and disabled for connecting to PCE. Proceeding to use proxy for ServiceNow instance but not for PCE.');
            }
            return proxy; // null
        } else {
            if (!skipLogs) {
                this.logger._error('Found an invalid scenario with MID Server proxy value (' + ms.getConfigParameter('mid.proxy.use_proxy') + ') and the checkbox. Please recheck the setup or reach out to Illumio Support.');
            }
            // just in case if we ever fall into gaps due to misconfiguration
            return null;
        }
    },

    /**
     * Execute the HTTP request
     * @param {String} endpoint Endpoint of the API
     * @param {String} queryString Query to add in the URL
     * @param {String} methodName Name of the method
     * @param {JSON} headers Object of headers to add to the request
     * @param {JSON} requestData Request body as JSON
     * @returns {JSON} Object of the response
     */
    _executeMethod: function(endpoint, queryString, method, headers, requestData, retryCount, lastSleepTime) {
        this.logger._debug('APICALL: ' + method.getName() + ' endpoint: ' + endpoint + ' queryString: ' + queryString);
        if (queryString != '') {
            method.setQueryString(queryString);
        }

        if (headers) {
            for (var header in headers) {
                method.addRequestHeader(header, headers[header]);
            }
        }
        if (requestData) {
            method.setRequestBody(JSON.stringify(requestData));
            method.addRequestHeader('Content-Type', 'application/json; charset=utf-8');
        }

        try {
            this.client.executeMethod(method);
            var responseBody = method.getResponseBody();

            if (responseBody)
                responseBody = IOUtils.toString(responseBody, "UTF-8");
            else
                responseBody = method.getResponseBodyAsString();

            var responseCode = parseInt(method.getStatusCode());
            var getMethodResponseHeaders = method.getResponseHeaders();
            var responseHeaders = {};
            for (var i = 0, len = getMethodResponseHeaders.length; i < len; i++) {
                responseHeaders[getMethodResponseHeaders[i].getName()] = getMethodResponseHeaders[i].getValue();
            }

            // if response status is 200 ok or 202 for async request
            if (responseCode >= 200 && responseCode < 300) {
                var responseObj = {
                    hasError: false,
                    data: responseBody ? JSON.parse(responseBody) : new JSON().decode(responseBody),
                    headers: responseHeaders,
                    status: responseCode
                };
                this.logger._debug('HTTP ' + method.getName() + ' Call complete, status: ' + responseCode);
                return responseObj;
            }

            retryCount = (typeof retryCount == 'undefined') ? this.httpRetryCount : retryCount;
            if (retryCount <= 0 || (RETRY_CODES.indexOf(responseCode) == -1 && responseCode < 500)) {
                this.logger._error('Failed: HTTP' + method.getName() + ' Call, status: ' + responseCode);
                this.logger._debug("Failure reason: " + method.getResponseBodyAsString());
                return {
                    hasError: true,
                    status: responseCode
                };
            }

            lastSleepTime = lastSleepTime ? lastSleepTime : 0;
            lastSleepTime = Math.min(this.httpRetryIntervalMax, lastSleepTime + this.httpRetryIntervalIncrement);
            if (responseCode == 429) {
                var retryAfterHeader = responseHeaders['retry-after'];
                if (retryAfterHeader) {
                    lastSleepTime = this.parseRetryAfterHeader(retryAfterHeader) || lastSleepTime;
                }
            }
            this.logger._error('Failed to execute HTTP call: Waiting for ' + lastSleepTime + ' seconds before doing another REST call.');
            Packages.java.lang.Thread.sleep(lastSleepTime * 1000);
            return this._executeMethod(endpoint, queryString, method, headers, requestData, retryCount - 1, lastSleepTime);
        } catch (e) {
            this.logger._error('PCE request failed : Exception ' + e);
            this.logger._error('Failed: HTTP' + method.getName() + ' Call, status: 0');
            return {
                hasError: true,
                status: 0
            };
        }
    },

    /**
     * Execute the GET call and retry multiple times if the request fails
     * @param {String} endpoint Endpoint of the API
     * @param {String} queryString Query to add in the URL
     * @param {JSON} headers Object of headers to add to the request
     * @param {JSON} requestData Request body as JSON
     * @returns {JSON} Object of the response
     **/
    get: function(endpoint, queryString, headers, requestData) {
        var getMethod = new GetMethod(this.baseUrl + endpoint);
        return this._executeMethod(endpoint, queryString, getMethod, headers, requestData);
    },

    /**
     * Execute the POST call and retry multiple times if the request fails
     * @param {String} endpoint Endpoint of the API
     * @param {String} queryString Query to add in the URL
     * @param {JSON} headers Object of headers to add to the request
     * @param {JSON} requestData Request body as JSON
     * @returns {JSON} Object of the response
     **/
    post: function(endpoint, queryString, headers, requestData) {
        var postMethod = new PostMethod(this.baseUrl + endpoint);
        return this._executeMethod(endpoint, queryString, postMethod, headers, requestData);
    },

    /**
     * Execute the PUT call and retry multiple times if the request fails
     * @param {String} endpoint Endpoint of the API
     * @param {String} queryString Query to add in the URL
     * @param {JSON} headers Object of headers to add to the request
     * @param {JSON} requestData Request body as JSON
     * @returns {JSON} Object of the response
     **/
    put: function(endpoint, queryString, headers, requestData) {
        var putMethod = new PutMethod(this.baseUrl + endpoint);
        return this._executeMethod(endpoint, queryString, putMethod, headers, requestData);
    },

    /**
     * Execute the DELETE call and retry multiple times if the request fails
     * @param {String} endpoint Endpoint of the API
     * @param {String} queryString Query to add in the URL
     * @param {JSON} headers Object of headers to add to the request
     * @param {JSON} requestData Request body as JSON
     * @returns {JSON} Object of the response
     **/
    deleteMethod: function(endpoint, queryString, headers, requestData) {
        var method = new DeleteMethod(this.baseUrl + endpoint);
        return this._executeMethod(endpoint, queryString, method, headers, requestData);
    },

    /**
     * Get the value of the parameter from the config file
     * @param {string} parm parameters to get from config.xml
     * @returns Value of the parameter
     */
    getMidConfigParam: function(parm) {
        try {
            var m = Packages.com.service_now.mid.MIDServer.get();
            var config = m.getConfig();
            var result = config.getParameter(parm);
            var result_alternative = config.getProperty(parm);

            if (result) {
                return result;
            } else if (result_alternative) {
                return result_alternative;
            } else {
                config = Packages.com.service_now.mid.services.Config.get();
                result = config.getProperty(parm);
                return result;
            }
        } catch (error) {
            this.logger._except('Failed to load mid server configurations.');
            return null;
        }
    },

    parseRetryAfterHeader: function(retryAfter) {
        var retryAfterSeconds = parseInt(retryAfter);
        if (isNaN(retryAfterSeconds)) {
            var retryAfterDate = new Date(retryAfter);
            if (retryAfterDate) {
                retryAfterSeconds = Math.floor((retryAfterDate.getTime() - new Date().getTime()) / 1000);
            }
        }
        return retryAfterSeconds || 0;
    },

    type: 'IllumioHTTPClient'
};]]></script>
        <sys_class_name>ecc_agent_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-08-22 07:31:35</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>6559a58adb4c6700dc9fabc5ca961943</sys_id>
        <sys_mod_count>213</sys_mod_count>
        <sys_name>IllumioHTTPClient</sys_name>
        <sys_overrides/>
        <sys_package display_value="Illumio" source="x_illu2_illumio">15314f1ddb882700dc9fabc5ca961943</sys_package>
        <sys_policy/>
        <sys_scope display_value="Illumio">15314f1ddb882700dc9fabc5ca961943</sys_scope>
        <sys_update_name>ecc_agent_script_include_6559a58adb4c6700dc9fabc5ca961943</sys_update_name>
        <sys_updated_by>crest.data</sys_updated_by>
        <sys_updated_on>2025-05-08 10:39:20</sys_updated_on>
    </ecc_agent_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>6559a58adb4c6700dc9fabc5ca961943</id>
        <sys_created_by>hetang.modi</sys_created_by>
        <sys_created_on>2025-04-09 10:15:18</sys_created_on>
        <sys_id>0e1bc72d83f0ae10dec3f4c6feaad3f3</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>hetang.modi</sys_updated_by>
        <sys_updated_on>2025-04-09 10:15:18</sys_updated_on>
        <table>ecc_agent_script_include</table>
        <use_es_latest>false</use_es_latest>
    </sys_es_latest_script>
</record_update>
