<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_illu2_illumio.IllumioDiscoverAndMapCMDBServers</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Discover servers from the CI list and map it with PCE data.</description>
        <name>IllumioDiscoverAndMapCMDBServers</name>
        <script><![CDATA[gs.include("IllumioConstants");
var IllumioDiscoverAndMapCMDBServers = Class.create();
IllumioDiscoverAndMapCMDBServers.prototype = {
    // Reference to hostname rules http://man7.org/linux/man-pages/man7/hostname.7.html
    VALID_HOSTNAME_REGEX: "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]).)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9-]*[A-Za-z0-9])$",
    initialize: function() {
        this.isworkloadinMapping = false;
        this.utils = new IllumioUtils();
        this.hostnameMap = {
            unmanaged: {},
            managed: {},
            unknown: {},
        };
    },

    /**
     * Process the fields of a each mapped table
     * @param {Object} pceConfig - PCE Configuration object
     **/
    _processTable: function(pceConfig) {
        var workloads = {},
            retiredWorkloads = {},
            duplicateWorkloads = [],
            processedHosts = {};
        var maxRecords = gs.getProperty("x_illu2_illumio.maximum_ci_records") || 25000;

        for (var table in pceConfig.source) {
            retiredWorkloads[table] = 0;
            gs.info("Started mapping CMDB Servers with PCE from table {0}", table);

            // CI Relation GlideRecord Object
            var sourceTableGr = new GlideRecord(table);
            sourceTableGr.setLimit(maxRecords);

            // Process records in batches
            var recordIndex = 0;
            while (recordIndex < maxRecords) {

                // Slice only 10000 records
                if (maxRecords - recordIndex >= 10000)
                    sourceTableGr.chooseWindow(recordIndex, recordIndex + 10000);
                else sourceTableGr.chooseWindow(recordIndex, maxRecords);

                if (pceConfig.source[table].order_by == "ASC") {
                    sourceTableGr.orderBy(pceConfig.source[table].sort_order);
                } else {
                    sourceTableGr.orderByDesc(pceConfig.source[table].sort_order);
                }
                sourceTableGr.query();

                // If there are no more records, break
                if (!sourceTableGr.hasNext()) {
                    gs.info("No more data available to process in {0} table.", table);
                    break;
                }

                while (sourceTableGr.next()) {
                    // check the condition for retired wotkloads and delete
                    if (!gs.nil(pceConfig.source[table].exclude_condition)) {
                        var condition = GlideFilter.checkRecord(sourceTableGr, pceConfig.source[table].exclude_condition, true);
                        if (condition) {
                            // condition matched
                            retiredWorkloads[table]++;
                            gs.info('Excluding workload from "{0}" table having sys_id: {1}', [table, sourceTableGr.sys_id]);
                            continue; // skipping retired workload
                        }
                    }

                    // check the condition for workloads to delete
                    var toDeleteWorkload = false;
                    if (!gs.nil(pceConfig.source[table].delete_condition)) {
                        var conditionAvail = GlideFilter.checkRecord(sourceTableGr, pceConfig.source[table].delete_condition, true);

                        if (conditionAvail) {
                            // condition matched
                            toDeleteWorkload = true;
                            gs.info('Deleting workload from "{0}" table having sys_id: {1}', [table, sourceTableGr.sys_id]);
                        }
                    }

                    // Check the condition for creating incident for workload
                    var createIncident = false;
                    if (!gs.nil(pceConfig.source[table].incident_condition)) {
                        var incidentConditionAvail = GlideFilter.checkRecord(sourceTableGr, pceConfig.source[table].incident_condition, true);
                        if (incidentConditionAvail) {
                            createIncident = true;
                        }
                    }

                    /* Process the record and get the label values */
                    var hostname = this.getValueFromCMDB(sourceTableGr, pceConfig.source[table].host_name);
                    if (!gs.nil(hostname)) {

                        // create PCE Workload object
                        var tempWorkload = this._evaluateClassFieldMapping(pceConfig, sourceTableGr, toDeleteWorkload, table);
                        tempWorkload["source_table"] = table;
                        tempWorkload["host_name"] = hostname;
                        // check if workload is duplicate
                        if (processedHosts[hostname]) {
                            tempWorkload['create_incident'] = false; // duplicate workload cannot create incident (if duplicateworkloads and workloads sharing same function in future)
                            duplicateWorkloads.push(tempWorkload);
                        } else {
                            tempWorkload['create_incident'] = createIncident;
                            workloads[hostname] = tempWorkload;
                            processedHosts[hostname] = true;
                        }
                    } else {
                        gs.info("[process] No hostname exist for {0} table having record with sys_id: {1}", [table, sourceTableGr.sys_id]);
                    }
                }
                /* Jump 10000 records */
                recordIndex += 10000;
            }

            // add log of retired workload count in scheduled job status
            if (retiredWorkloads[table] > 0) {
                var jobContent = {
                    logs: 'Total excluded workloads from "' + table + '" table : ' + retiredWorkloads[table],
                    current_operation: "Mapping CMDB servers to PCE",
                };
                this.utils.updateJobRecord(this.illumioJobId, jobContent);
            }
        }
        return {
            workloads: workloads,
            duplicateWorkloads: duplicateWorkloads,
        };
    },

    /**
     * Prepare workload object from Class Field Mapping Configuration
     * @param {Object} pceConfig PCE Configuration object
     * @param {Object} sourceTableGr CMDB record
     * @param {Boolean} toDeleteWorkload Flag to delete workload
     * @returns {Object} Workload object
     */
    _evaluateClassFieldMapping: function(pceConfig, sourceTableGr, toDeleteWorkload, table) {

        // initialize object
        var tempWorkload = {
            labelDimesion: {},
            ipAddress: {
                cmdb_value: []
            },
        };

        // set label dimension values
        tempWorkload["deleted_from_pce"] = toDeleteWorkload;
        for (var field in pceConfig.source[table].label_dimensions) {
            tempWorkload["labelDimesion"][field] = {
                "cmdb_value": this.getValueFromCMDB(sourceTableGr, pceConfig.source[table].label_dimensions[field]),
                "label_dimension_sys_id": pceConfig.source[table].label_dimensions[field]["label_dimension_sys_id"]
            };
        }

        // set ip addresses
        tempWorkload["ipAddress"]["public_ip_address"] = this.getValueFromCMDB(sourceTableGr, pceConfig.source[table].public_ip);
        var ipAddressObjects = pceConfig.source[table].ip_address;

        for (var ipIndex in ipAddressObjects) {
            var value = this.getValueFromCMDB(sourceTableGr, ipAddressObjects[ipIndex]);
            if (!gs.nil(value)) {

                // check if value contains multiple ip addresses
                if (ipAddressObjects[ipIndex].is_multiple)
                    tempWorkload["ipAddress"]["cmdb_value"] = tempWorkload["ipAddress"]["cmdb_value"].concat(value);
                else
                    tempWorkload["ipAddress"]["cmdb_value"].push(value);
            }
        }

        // set cmdb identifiers
        tempWorkload["identifier"] = sourceTableGr.sys_id.getDisplayValue();

        return tempWorkload;
    },

    /**
     * Starts the process of Mapping CMDB servers
     * @param {String} illumioJobId Id of the scheduled job
     */
    process: function(illumioJobId) {
        this.illumioJobId = illumioJobId;
        this.pceConfigId = this.utils.getConfigurationId(illumioJobId);
        var jobContent;
        try {
            /* Read the PCE configuration for custom table and fields */
            var pceConfig = new IllumioGetPCEConfiguration().getConfiguration(this.pceConfigId);

            // check if configuration is available
            if (gs.nil(pceConfig)) {
                gs.error("Failed to fetch PCE configuration");
                jobContent = {
                    logs: "Failed to fetch PCE configuration ",
                    current_operation: "Mapping Discovery",
                    job_status: "failed",
                    job_completed: new GlideDateTime(),
                };
                this.utils.updateJobRecord(this.illumioJobId, jobContent);
                return;
            }

            // check if field mappings are configured
            if (gs.nil(pceConfig.source)) {
                gs.error("No PCE field mapping configured for PCE Configuration named {0}", pceConfig["name"]);
                jobContent = {
                    logs: "No PCE field mapping configured ",
                    current_operation: "Mapping Discovery",
                    job_status: "failed",
                    job_completed: new GlideDateTime(),
                };
                this.utils.updateJobRecord(this.illumioJobId, jobContent);
                return;
            }

            // Update scheduled job status to Fetching CMDB Servers
            jobContent = {
                logs: "Fetching CMDB servers",
                current_operation: "Fetching CMDB servers",
            };
            this.utils.updateJobRecord(this.illumioJobId, jobContent);


            gs.info("Deleting existing custom table data for PCE Configuration {0}", pceConfig["name"]);

            // Remove all entries from field value table
            var workloadFieldValueGr = new GlideRecord("x_illu2_illumio_illumio_pce_workload_field_value");
            workloadFieldValueGr.addQuery("illumio_pce_workload.illumio_pce_configuration", this.pceConfigId);
            workloadFieldValueGr.query();
            workloadFieldValueGr.deleteMultiple();

            // Remove all entries from custom table
            var illumioServersGr = new GlideRecord("x_illu2_illumio_illumio_pce_workload");
            illumioServersGr.addQuery("illumio_pce_configuration", this.pceConfigId);
            illumioServersGr.query();
            illumioServersGr.deleteMultiple();

            gs.info("Existing custom table data deleted for PCE Configuration {0}", pceConfig["name"]);

            var startTime = Date.now();

            // Update scheduled job status
            jobContent = {
                logs: "Mapping CMDB servers to PCE",
                current_operation: "Mapping CMDB servers to PCE",
            };
            this.utils.updateJobRecord(this.illumioJobId, jobContent);

            // prepare workload objects
            var allWorkloads = this._processTable(pceConfig);

            // create PCE Workloads
            for (var workload in allWorkloads["workloads"]) {
                this.addToCustomTable(workload, allWorkloads["workloads"][workload]);
            }

            // create duplicate PCE Workloads
            for (var item in allWorkloads["duplicateWorkloads"]) {
                this.addToCustomTable(
                    allWorkloads["duplicateWorkloads"][item].host_name,
                    allWorkloads["duplicateWorkloads"][item]
                );
            }
            gs.info("Added all records to the custom table");

            /* Sync with PCE */
            if (pceConfig.autoSync) {
                /* Update scheduled job status */
                jobContent = {
                    logs: "Synchronizing workloads to PCE ",
                    current_operation: "Synchronizing workloads to PCE",
                    job_type: "data sync",
                };
                this.utils.updateJobRecord(this.illumioJobId, jobContent);

                // Start Synchronizing with PCE
                gs.info("Synchronizing with PCE");
                var autoSync = new IllumioAutoSyncWithPCE();
                autoSync.process(this.illumioJobId);
            } else {
                /* Update scheduled job status */
                jobContent = {
                    logs: "Completed discovery",
                    current_operation: "Completed discovery",
                    job_status: "completed",
                    job_completed: new GlideDateTime(),
                };
                this.utils.updateJobRecord(this.illumioJobId, jobContent);
            }

            var endTime = Date.now();
            var timeTaken = endTime - startTime;
            gs.info("Time taken to finish mapping {0} milliseconds for PCE Configuration {1}", [timeTaken, pceConfig["name"]]);
        } catch (e) {

            gs.error("Exception occurred while mapping data for PCE Configuration {0} Error{1}", [pceConfig["name"], e]);
            jobContent = {
                logs: "Exception occurred while mapping data " + e,
                current_operation: "Mapping Discovery",
                job_status: "failed",
                job_completed: new GlideDateTime(),
            };
            this.utils.updateJobRecord(this.illumioJobId, jobContent);
        }
    },

    /**
     * Validate hostname
     * @param {String} hostname Hostname of the workload
     */
    _isValidHostName: function(hostname) {
        try {
            if (!hostname.match(this.VALID_HOSTNAME_REGEX)) {
                gs.error("Skipped adding hostname {0} to the x_illu2_illumio_illumio_pce_workload table as it is invalid.", hostname);
                return;
            }
        } catch (e) {
            gs.error("Skipped adding hostname {0} to the x_illu2_illumio_illumio_pce_workload table due to exception. Error{1}", [hostname, e]);
            var jobContent = {
                logs: "Skipped adding hostname " +
                    hostname +
                    " to the x_illu2_illumio_illumio_pce_workload table due to exception. " +
                    e,
                current_operation: "Mapping Discovery",
                job_status: "failed",
                job_completed: new GlideDateTime(),
            };
            this.utils.updateJobRecord(this.illumioJobId, jobContent);
            return;
        }
    },

    /**
     * Get the Workload Mapping record for given hostname and workload type
     * @param {String} hostNamePart hostname
     * @param {Boolean} workloadType type of workload
     * @returns {GlideRecord} GlideRecord of Workload Mapping
     */
    _fetchWorkloadMapping: function(hostNamePart, workloadType) {

        var workloadsMappingGr = new GlideRecord("x_illu2_illumio_illumio_pce_workloads_mapping");
        workloadsMappingGr.addQuery("agent", workloadType);
        workloadsMappingGr.addQuery("illumio_pce_configuration", this.pceConfigId);
        workloadsMappingGr.setLimit(1);
        workloadsMappingGr.addQuery("hostname", hostNamePart).addOrCondition("hostname", "STARTSWITH", hostNamePart + ".");
        workloadsMappingGr.query();

        return workloadsMappingGr;
    },

    /**
     * Queries the workload in mappings table and initialize and insert a record in the workloads table
     * @param {boolean} workloadType true if workload is managed, false if workload is unmanaged, null if workload is unknown
     * @param {string} hostname hostname of the workload
     * @param {GlideRecord} sourceTableGr GlideRecord of the CMDB table
     */
    _queryWorkload: function(workloadType, hostname, sourceTableGr) {

        var illumioServersGr = new GlideRecord("x_illu2_illumio_illumio_pce_workload");
        var workload = "managed";
        if (!workloadType) {
            workload = "unmanaged";
        }

        // fetch workload mapping record
        var hostNamePart = hostname.split(".")[0];
        var workloadsMappingGr = this._fetchWorkloadMapping(hostNamePart, workloadType);

        if (workloadsMappingGr.next()) {
            this.isworkloadinMapping = true;
            illumioServersGr = this._initializeObject(workload, illumioServersGr, hostname, sourceTableGr, workloadsMappingGr);

            // Set interfaces in the PCE Workload table
            var interfacesIPs = [];
            if (!workloadType) {
                interfacesIPs = JSON.parse(workloadsMappingGr.getValue("interfaces"));
            }
            this._setInterfaceObject(illumioServersGr, sourceTableGr, interfacesIPs);

            // If PCE IP Address is not null then add it to PCE workloads custom table
            var mappingIP = workloadsMappingGr.public_ip;
            if (mappingIP != "null") {
                illumioServersGr.public_ip_address = mappingIP;
            }

            illumioServersGr = this._insertObject(hostNamePart, illumioServersGr, sourceTableGr);

            // add field values for configured Label Dimensions
            try {
                var workloadLabels = JSON.parse(workloadsMappingGr.getValue("labels"));
                this._updatePCELabelValues(sourceTableGr, workloadLabels);
            } catch (err) {
                gs.error("Error while parsing labels from workloadMapping record {0}. Error{1}", [workloadsMappingGr.labels, err]);
                var jobContent = {
                    logs: "Error while parsing labels from workloadMapping record" + workloadsMappingGr.labels + ". " + err,
                    current_operation: "Mapping Discovery",
                    job_status: "failed",
                    job_completed: new GlideDateTime(),
                };
                this.utils.updateJobRecord(this.illumioJobId, jobContent);
            }

            this._createWorkloadFieldValue(illumioServersGr, sourceTableGr);
        }
        return illumioServersGr;
    },

    /**
     * Prepare interface object
     * @param {GlideRecord} illumioServersGr GlideRecord of PCE Workload table
     * @param {Object} sourceTableGr Workload object
     * @param {Object} interfacesIPs Interface object from PCE 
     */
    _setInterfaceObject: function(illumioServersGr, sourceTableGr, interfacesIPs) {
        var interfaceObject = {};

        // set PCE ip address
        for (var index in interfacesIPs) {
            interfaceObject[interfacesIPs[index]["name"]] = {
                pce_value: interfacesIPs[index]["address"],
                cmdb_value: ""
            };
        }

        // set umw0 cmdb value
        interfaceObject["umw0"] = !gs.nil(interfaceObject["umw0"]) ? interfaceObject["umw0"] : {
            "pce_value": ''
        };
        interfaceObject["umw0"]["cmdb_value"] = sourceTableGr.ipAddress.public_ip_address;

        // set cmdb ip address
        var cmdbValuesLength = sourceTableGr.ipAddress.cmdb_value.length;
        for (var keyCount = 1; keyCount <= MAX_IP_ADDRESSES && keyCount - 1 < cmdbValuesLength; keyCount++) {
            var key = "umw" + keyCount;
            var cmdbVal = sourceTableGr.ipAddress.cmdb_value[keyCount - 1];
            if (!gs.nil(cmdbVal)) {
                if (gs.nil(interfaceObject[key]))
                    interfaceObject[key] = {
                        pce_value: ""
                    };
                interfaceObject[key]["cmdb_value"] = cmdbVal;
            }
        }

        illumioServersGr.setValue("interfaces", JSON.stringify(interfaceObject));
    },

    /**
     * Create records in PCE Workload Field Value with cmdb and pce values for configured label dimensions
     * @param {GlideRecord} illumioServersGr GlideRecord of PCE Workload table
     * @param {Object} sourceTableGr Workload object
     */
    _createWorkloadFieldValue: function(illumioServersGr, sourceTableGr) {
        // Set CMDB and PCE values for Label Dimensions

        var labelDimesionData = sourceTableGr["labelDimesion"];
        for (var field in labelDimesionData) {
			if (gs.nil(labelDimesionData[field]["cmdb_value"]) && gs.nil(labelDimesionData[field]["pce_value"]))
				continue;
			
            var workloadFieldValueGr = new GlideRecord("x_illu2_illumio_illumio_pce_workload_field_value");
            workloadFieldValueGr.initialize();
            workloadFieldValueGr.setValue("illumio_label_dimension", labelDimesionData[field]["label_dimension_sys_id"]);

            if (!gs.nil(labelDimesionData[field]["cmdb_value"]))
                workloadFieldValueGr.setValue(
                    "cmdb_value",
                    labelDimesionData[field]["cmdb_value"]
                );
            workloadFieldValueGr.setValue("illumio_pce_workload", illumioServersGr.getUniqueValue());

            if (!gs.nil(labelDimesionData[field]["pce_value"]))
                workloadFieldValueGr.setValue(
                    "pce_value",
                    labelDimesionData[field]["pce_value"]
                );
            workloadFieldValueGr.insert();
        }
    },

    /**
     * Checkes if the label is already present in PCE
     * @param {Object} sourceTableGr Workload object
     * @param {JSON} workloadLabels Object of workloads with labels
     */
    _updatePCELabelValues: function(sourceTableGr, pceWorkloadLabels) {
        var labelsMappingGr = new GlideRecord("x_illu2_illumio_illumio_pce_labels_mapping");

        // Set PCE values for Label Dimensions
        for (var labelIndex = 0; labelIndex < pceWorkloadLabels.length; labelIndex++) {
            labelsMappingGr.initialize();
            labelsMappingGr.addQuery("illumio_pce_configuration", this.pceConfigId);
            labelsMappingGr.addQuery("href", pceWorkloadLabels[labelIndex].href);
            labelsMappingGr.setLimit(1);
            labelsMappingGr.query();

            /* If PCE label exists with same href	*/
            if (labelsMappingGr.next()) {
                var labelDimensionKey = labelsMappingGr.getValue("key");
                if (gs.nil(sourceTableGr["labelDimesion"][labelDimensionKey])) {
                    sourceTableGr["labelDimesion"][labelDimensionKey] = {
                        label_dimension_sys_id: this.utils.fetchLabelDimensionSysId(labelDimensionKey, this.pceConfigId)
                    };
                }
                sourceTableGr["labelDimesion"][labelDimensionKey]["pce_value"] = labelsMappingGr.getValue("value");
            }
        }
    },

    /**
     * Initialize the GlideRecord of the Workload
     * @param {boolean} workload true if the workload is managed, false if unmanaged, null if unknown
     * @param {GlideRecord} illumioServersGr GlideRecord of the Workload
     * @param {string} hostname Hostname of the workload
     * @param {GlideRecord} sourceTableGr GlideRecord of the CMDB table
     * @param {GlideRecord} workloadsMappingGr GlideRecord of the workloads mapping table
     * @returns GlideRecord of the object
     */
    _initializeObject: function(
        workload,
        illumioServersGr,
        hostname,
        sourceTableGr,
        workloadsMappingGr
    ) {
        illumioServersGr.initialize();
        illumioServersGr.setValue("servicenow_cmdb_identifier", sourceTableGr.identifier + "");
        illumioServersGr.setValue("hostname", hostname);
        illumioServersGr.setValue("illumio_pce_configuration", this.pceConfigId);
        illumioServersGr.setValue("source_table", sourceTableGr["source_table"]);

        illumioServersGr.conflicts = false;
        illumioServersGr.setValue("known_to_pce", "unknown");

        if (!gs.nil(workload)) {
            illumioServersGr.setValue("known_to_pce", workload);
            if (workload == "unmanaged") {
                illumioServersGr.deleted_from_pce = sourceTableGr["deleted_from_pce"];
            }
            illumioServersGr.setValue("pce_workload_href", workloadsMappingGr.getValue("href"));
            illumioServersGr.ven_href = workloadsMappingGr.getValue("ven_href");
            illumioServersGr.ven_status = workloadsMappingGr.getValue("ven_status");
            illumioServersGr.enforcement_mode = workloadsMappingGr.getValue("enforcement_mode");
            illumioServersGr.ven_version = workloadsMappingGr.getValue("ven_version");
            illumioServersGr.os_id = workloadsMappingGr.getValue("os_id");
        }

        return illumioServersGr;
    },

    /**
     * Create or update incident for workload
     * @param {GlideRecord} illumioServersGr GlideRecord of the workloads table
     * @returns sys_id of incident record
     */
    createOrUpdateIncident: function(illumioServersGr, incidentSysId) {

        var incidentGr = new GlideRecord('incident');
        if (!incidentGr.get(incidentSysId)) {
            incidentGr.initialize();
        }
        
        var information = "Hostname: " + illumioServersGr.getValue("hostname");
        if (!gs.nil(illumioServersGr.getValue("pce_workload_href"))) {
            information += "\n" + "Href: " + illumioServersGr.getValue("pce_workload_href"); 
        }

        if (!gs.nil(illumioServersGr.getValue("public_ip_address"))) {
            information += "\n" + "Public IP Address: " + illumioServersGr.getValue("public_ip_address"); 
        }
        
        if (!gs.nil(illumioServersGr.getValue("known_to_pce"))) {
            information += "\n" + "Known to PCE: " + illumioServersGr.getValue("known_to_pce"); 
        }
        
         
        incidentGr.setValue("short_description",illumioServersGr.getDisplayValue("illumio_pce_configuration") +": "+ illumioServersGr.getValue("hostname"));
        incidentGr.setValue("description", information);
        incidentGr.setValue("cmdb_ci",illumioServersGr.getValue("servicenow_cmdb_identifier"));
        incidentGr.update();

        if (gs.nil(incidentSysId)) {
            incidentMappingGr = new GlideRecord("x_illu2_illumio_illumio_incident_mapping");
            incidentMappingGr.initialize();
            incidentMappingGr.setValue("href", illumioServersGr.getValue("pce_workload_href"));
            incidentMappingGr.setValue("hostname", illumioServersGr.getValue("hostname"));
            incidentMappingGr.setValue("incident", incidentGr.getUniqueValue());
            incidentMappingGr.setValue("illumio_pce_configuration", illumioServersGr.getValue("illumio_pce_configuration"));
            incidentMappingGr.insert();
            return incidentGr.getUniqueValue();
        }
        return incidentGr.getUniqueValue();
    },

    /**
     * Populate incident if it's already created
     * @param {GlideRecord} illumioServerGr 
     */
    getIncident: function(illumioServerGr) {
        var incidentMappingGr = new GlideRecord("x_illu2_illumio_illumio_incident_mapping");
        incidentMappingGr.addQuery("illumio_pce_configuration", this.pceConfigId);
        var href = illumioServerGr.getValue("pce_workload_href");
        if (gs.nil(href)){
            incidentMappingGr.addNullQuery("href");
        }
        else{
            incidentMappingGr.addQuery("href", href);
        }
        incidentMappingGr.addQuery("hostname", illumioServerGr.getValue("hostname"));
        incidentMappingGr.setLimit(1);
        incidentMappingGr.query();
        if (incidentMappingGr.next()) {
            return incidentMappingGr.getValue("incident");
        }
    },


    /**
     * Insert PCE Workload record
     * @param {string} hostNamePart Hostname of the workload or part of the hostname
     * @param {GlideRecord} illumioServersGr GlideRecord of the workload
     * @returns GlideRecord of the Workload
     */
    _insertObject: function(hostNamePart, illumioServersGr, sourceTableGr) {
        hostNamePart = hostNamePart.toLowerCase();

        if (!gs.nil(this.hostnameMap[illumioServersGr.getValue("known_to_pce")][hostNamePart])) {
            illumioServersGr.setValue("duplicate_of", this.hostnameMap[illumioServersGr.getValue("known_to_pce")][hostNamePart]);
            illumioServersGr.duplicate = true;
            illumioServersGr.insert();
            return illumioServersGr;
        }

        // Check if incident already exists
        var incidentSysId = this.getIncident(illumioServersGr);
       
        //creation of new incident
        if (sourceTableGr['create_incident'] || !gs.nil(incidentSysId)) {
            illumioServersGr.setValue("incident", this.createOrUpdateIncident(illumioServersGr, incidentSysId)); //creating new incident for given workload
        }

        illumioServersGr.duplicate = false;
        var sysId = illumioServersGr.insert();
        this.hostnameMap[illumioServersGr.getValue("known_to_pce")][hostNamePart] = sysId;

        return illumioServersGr;
    },

    /**
     * Queries the mapping table and add the workloads to PCE workloads table
     * @param {string} hostname Hostname of the workload
     * @param {GlideRecord} sourceTableGr GlideRecord of the CMDB table
     */
    addToCustomTable: function(hostname, sourceTableGr) {
        try {
            // initialize variables
            this.isworkloadinMapping = false;

            // validate hostname
            this._isValidHostName(hostname);

            //query managed workload
            this._queryWorkload(true, hostname, sourceTableGr);

            //query unmanaged workload
            this._queryWorkload(false, hostname, sourceTableGr);

            // handle record if it's not present in PCE Workload Mapping table
            if (!this.isworkloadinMapping) {
                this._createUnknownWorkload(hostname, sourceTableGr);
            }
        } catch (e) {
            gs.error("[addToCustomTable] Exception while adding hostname {0} to workloads list. Error{1}", [hostname, e]);
            var jobContent = {
                logs: "Exception while adding hostname " + hostname + " to workloads list. Exception: " + e,
                current_operation: "Mapping Discovery",
                job_status: "failed",
                job_completed: new GlideDateTime(),
            };
            this.utils.updateJobRecord(this.illumioJobId, jobContent);
            return;
        }
    },

    /**
     * Create record in PCE Workload if it's not already present at Illumio
     * @param {String} hostname Hostname of the workload
     * @param {Object} sourceTableGr Workload object
     */
    _createUnknownWorkload: function(hostname, sourceTableGr) {
        var hostNamePart = hostname.split(".")[0];
        var illumioServersGr = new GlideRecord("x_illu2_illumio_illumio_pce_workload");
        illumioServersGr = this._initializeObject(
            null,
            illumioServersGr,
            hostname,
            sourceTableGr
        );

        this._setInterfaceObject(illumioServersGr, sourceTableGr, []);
        this._insertObject(hostNamePart, illumioServersGr, sourceTableGr);
        this._createWorkloadFieldValue(illumioServersGr, sourceTableGr);
    },

    /**
     * Populate CMDB values
     * @param {GlideRecord} sourceTableGr GlideRecord of the CMDB table
     * @param {Object} fieldMapping Object of Class Field Mapping 
     * @returns {Object} value from CMDB record
     */
    getValueFromCMDB: function(sourceGr, fieldMapping) {
        if (fieldMapping.advanced) {
            return this.getValueFromScript(sourceGr, fieldMapping);
        }
        return this.getValueFromDotWalkableField(sourceGr, fieldMapping.value);
    },

    /**
     * Evaluate script
     * @param {GlideRecord} sourceGr GlideRecord of the CMDB table
     * @param {Object} fieldMapping Object of Class Field Mapping 
     * @returns {object} value from script
     */
    getValueFromScript: function(sourceGr, fieldMapping) {
        try {
            var fieldMappingGr = new GlideRecord("x_illu2_illumio_illumio_class_field_mapping");
            if (fieldMappingGr.get(fieldMapping["mappingSysId"])) {
                var evaluator = new GlideScopedEvaluator();
                evaluator.putVariable('sourceGr', sourceGr);
                evaluator.putVariable('answer', null);
                evaluator.evaluateScript(fieldMappingGr, 'script', null);
                return evaluator.getVariable('answer');
            }
        } catch (e) {
            gs.error("[getValueFromScript] Error while fetching value from cmdb record", e);
        }
        return "";
    },

    /**
     * Gets the value of the field that is having dot walking enable.
     * @param {String} sourceGr GlideRecord to get the field value from.
     * @param {String} fieldName Name of the field to get the value from.
     * @returns {String} Value of the field.
     **/
    getValueFromDotWalkableField: function(sourceGr, fieldName) {
        try {
            if (gs.nil(sourceGr) || gs.nil(fieldName)) return "";
            var dotWalkableFieldArray = fieldName.split(".");
            var tempGR = sourceGr; //to use the temporary variable to avoid changing into the existing one
            var fIndex;
            for (fIndex = 0; fIndex < dotWalkableFieldArray.length - 1; fIndex++) {
                if (gs.nil(tempGR[dotWalkableFieldArray[fIndex]])) return "";
                tempGR = tempGR[dotWalkableFieldArray[fIndex]].getRefRecord();
                if (!tempGR.isValidRecord()) return "";
            }
            return tempGR[dotWalkableFieldArray[fIndex]] + "";
        } catch (e) {
            gs.error("[getValueFromDotWalkableField] Error while fetching value from cmdb record", e);
        }
        return "";
    },

    type: "IllumioDiscoverAndMapCMDBServers",
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-08-22 11:26:01</sys_created_on>
        <sys_id>4c10e6c6dbcc6700dc9fabc5ca96191d</sys_id>
        <sys_mod_count>406</sys_mod_count>
        <sys_name>IllumioDiscoverAndMapCMDBServers</sys_name>
        <sys_package display_value="Illumio" source="x_illu2_illumio">15314f1ddb882700dc9fabc5ca961943</sys_package>
        <sys_policy/>
        <sys_scope display_value="Illumio">15314f1ddb882700dc9fabc5ca961943</sys_scope>
        <sys_update_name>sys_script_include_4c10e6c6dbcc6700dc9fabc5ca96191d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-03-24 06:13:52</sys_updated_on>
    </sys_script_include>
</record_update>
