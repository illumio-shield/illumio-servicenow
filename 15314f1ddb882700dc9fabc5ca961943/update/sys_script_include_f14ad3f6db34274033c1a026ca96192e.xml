<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_illu2_illumio.IllumioAutoSyncWithPCE</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>IllumioAutoSyncWithPCE</name>
        <script><![CDATA[gs.include("IllumioConstants");
var IllumioAutoSyncWithPCE = Class.create();
IllumioAutoSyncWithPCE.prototype = {
    initialize: function() {
        this.sys_ids = [];
        this.managedWorkloadsList = [];
        this.unManagedWorkloadsList = [];
        this.unknownWorkloadsList = [];
        this.payloadSysIds = [];
        this.workloadsToDelete = 0;
        this.maxSizeOfWorkloadPayload = parseInt(gs.getProperty("x_illu2_illumio.max_workloads_in_each_payload_for_autosync", 10000));
    },
    /**
     * Starts the process of auto sync
     * @params {string} illumioJobId Job Id of the scheduled job
     **/
    process: function(illumioJobId) {

        var labelsToCreate = 0,
            utils = new IllumioUtils(),
            skippedWorkloads = 0,
            partial_success = "false",
            countObject, sysIds = [],
            counter = 0,
            selectedRecordsObject = {};

        try {

            // fetch scheduled job record
            var illumioScheduledJobsGr = new GlideRecord("x_illu2_illumio_illumio_scheduled_jobs");
            if (!illumioScheduledJobsGr.get(illumioJobId)) {
                gs.error("Error while starting Auto Sunc process: Not able to find Scheduled Job with Sys ID: {0}", illumioJobId);
                return;
            }

            // fetch the PCE Configuration record
            var configSysId = illumioScheduledJobsGr.getValue("illumio_pce_configuration"),
                userGr = illumioScheduledJobsGr.job_owner;
            var configGr = new GlideRecord("x_illu2_illumio_illumio_pce_conf");
            if (!configGr.get(configSysId)) {
                gs.error("Error while starting Auto Sunc process: Not able to find PCE Configuration with Sys ID: {0}", configSysId);
                return;
            }

            var userName = userGr.first_name + " " + userGr.last_name,
                pceConfig = new IllumioGetPCEConfiguration().getConfiguration(configSysId);
            var creationLimit = parseInt(pceConfig.create_workload_limit);

            // get all the workload sysIds
            var allWorkloads = new GlideRecord("x_illu2_illumio_illumio_pce_workload");
            allWorkloads.addEncodedQuery('duplicate=false^conflicts=true');
            allWorkloads.addQuery('deleted_from_pce', false);
            allWorkloads.addQuery("illumio_pce_configuration", configSysId);
            allWorkloads.orderBy("known_to_pce");
            allWorkloads.query();
            while (allWorkloads.next()) {
                sysIds.push(allWorkloads.getUniqueValue());
            }

            selectedRecordsObject[configSysId] = sysIds;

            var status = utils.fetchLabelGroupsAndLabelsFromPCE(configGr);
            if (!status) {
                gs.error("Can not start auto sync process as MID server is down for configuration: {0}", configGr.getValue("name"));
                return;
            }

            // fetch count of critical group names
            countObject = utils.countLabelGroups([configSysId]);

            // check if workload contains critical label
            var response = utils.skipRecordsForSync(selectedRecordsObject);
            var checkedRecordsObject = response.filteredRecords;
            var totalRecords = response.totalRecords;
            if (totalRecords < sysIds.length) {
                partial_success = "true";
                skippedWorkloads = sysIds.length - totalRecords;
            }

            // process all workloads
            response = utils.getWorkloadData(checkedRecordsObject);
            totalRecords = response.totalRecords;
            var checkedRecordsData = response.filteredRecords[configSysId];

            //delete retired worklaods 
            var retiredWorkloads = new GlideRecord("x_illu2_illumio_illumio_pce_workload");
            retiredWorkloads.addQuery('deleted_from_pce', true);
            retiredWorkloads.addQuery("illumio_pce_configuration", configSysId);
            retiredWorkloads.query();

            // check if there is unknown or inconsistent or retired workload
            if (totalRecords == 0 && !retiredWorkloads.hasNext()) {
                // Table is empty
                gs.info("Auto synchronization : No unknown or inconsistent or retired workload found.");
                illumioScheduledJobsGr.logs +=
                    "\n[" +
                    new Date(new GlideDateTime().getNumericValue()).toISOString() +
                    '] Total critical label groups fetched : ' + countObject[configSysId];
                illumioScheduledJobsGr.logs +=
                    "\n[" +
                    new Date(new GlideDateTime().getNumericValue()).toISOString() +
                    "] No unknown or inconsistent or retired workload found";
                illumioScheduledJobsGr.logs +=
                    "\n[" +
                    new Date(new GlideDateTime().getNumericValue()).toISOString() +
                    "] Synchronization with PCE completed" + '\n -------------------------------------\nTotal workloads: ' + skippedWorkloads + '\n Created unknown workloads: 0\n Updated managed workloads: 0\n Updated unmanaged workloads: 0\n Skipped workloads: ' + skippedWorkloads;
                illumioScheduledJobsGr.current_operation =
                    "Synchronization with PCE completed";

                illumioScheduledJobsGr.job_status = partial_success == "true" ? "partial_success" : "completed";
                illumioScheduledJobsGr.job_completed = new GlideDateTime();
                illumioScheduledJobsGr.update();
                return;
            }

            // Generate the managed and unmanaged workloads' list
            var unknownWorkloadsSelected = 0,
                unmanagedworkloadSelected = 0,
                managedworkloadSelected = 0;
            for (var index = 0, len = checkedRecordsData.length; index < len; index++) {

                // Workload object with common items
                var workload_object = {
                    source_table: checkedRecordsData[index].source_table,
                    hostname: checkedRecordsData[index]["hostname"],
                    sys_id: checkedRecordsData[index]["sys_id"],
                    updateFields: checkedRecordsData[index].updateFields,
                    labels: [],
                    createlabels: []
                };

                // Populate the labels and createLabels lists
                workload_object = this.getUseCreateLabelsList(
                    configSysId,
                    workload_object,
                    checkedRecordsData[index]["label_data"]
                );
                var instanceURL = gs.getProperty('glide.servlet.uri');
                instanceURL = instanceURL.replace('https://', '');
                instanceURL = instanceURL.replace('/', '');

                labelsToCreate += workload_object.createlabels.length;
                if (checkedRecordsData[index]["known_to_pce"] == "managed") {
                    // If the workload is managed and has conflicts
                    workload_object["href"] = checkedRecordsData[index]["pce_workload_href"];

                    // Add note about update
                    workload_object["description"] =
                        "Updated by " +
                        userName +
                        " [" + instanceURL + "] at " +
                        new Date().toLocaleString();

                    managedworkloadSelected += 1;
                    this.managedWorkloadsList.push(workload_object);
                    counter = this.addObjectToPayload(false, counter);
                } else if (checkedRecordsData[index]["known_to_pce"] == "unmanaged") {
                    // If the workload is unmanaged and has conflicts
                    workload_object["href"] = checkedRecordsData[index]["pce_workload_href"];

                    // Add note about update
                    workload_object["description"] =
                        "Updated by " +
                        userName +
                        " [" + instanceURL + "] at " +
                        new Date().toLocaleString();

                    workload_object["known_to_pce"] = checkedRecordsData[index]["known_to_pce"];
                    workload_object["interfaces"] = checkedRecordsData[index]["interfaces"];
                    gs.info("Unknown Workload Interfaces: " + JSON.stringify(workload_object["interfaces"]));
                    if (checkedRecordsData[index]["conflicts"] == "1") {
                        unmanagedworkloadSelected += 1;
                        this.unManagedWorkloadsList.push(workload_object);
                        counter = this.addObjectToPayload(false, counter);
                    }
                } else if (creationLimit == 0 || (creationLimit != 0 && this.unknownWorkloadsList.length < creationLimit)) {
                    workload_object["description"] =
                        "Created by " +
                        userName +
                        " [" + instanceURL + "] at " +
                        new Date().toLocaleString();
                    if (checkedRecordsData[index]["ip_address"] != "") {
                        workload_object["ip_address"] = checkedRecordsData[index]["ip_address"];
                    }
                    workload_object.interfaces = checkedRecordsData[index]["interfaces"];
                    this.unknownWorkloadsList.push(workload_object);
                    counter = this.addObjectToPayload(false, counter);
                    unknownWorkloadsSelected += 1;
                }
            }

            //process retired workloads
            var retiredWorkloadsObject = {};
            while (retiredWorkloads.next()) {
                var retiredSysId = retiredWorkloads.getUniqueValue();
                var retiredHostName = retiredWorkloads.getValue("hostname").trim();
                var mappingTableGr = new GlideRecord("x_illu2_illumio_illumio_pce_workloads_mapping");
                mappingTableGr.addQuery('hostname', retiredHostName);
                mappingTableGr.addQuery("illumio_pce_configuration", configSysId);
                mappingTableGr.addQuery('agent', false);
                mappingTableGr.setLimit(1);
                mappingTableGr.query();
                if (mappingTableGr.next()) {
                    this.workloadsToDelete++;
                    retiredWorkloadsObject[mappingTableGr.getValue("href")] = retiredSysId;
                } else {
                    // mark deleted from pce as false
                    retiredWorkloads.setValue("deleted_from_pce", false);
                    retiredWorkloads.update();
                }
            }

            // check thresold limit
            var wlToModify = unmanagedworkloadSelected + managedworkloadSelected;
            var checkThreshold = new IllumioThresholdLimit().checkThresholdLimit(configSysId, labelsToCreate, wlToModify, unknownWorkloadsSelected, this.workloadsToDelete);
            if (!checkThreshold.hasError && checkThreshold.limitExceed) {
                var notDeletedworkload = new GlideRecord('x_illu2_illumio_illumio_pce_workload');
                notDeletedworkload.addQuery('deleted_from_pce', true);
                notDeletedworkload.query();
                while (notDeletedworkload.next()) {
                    notDeletedworkload['deleted_from_pce'] = false;
                    notDeletedworkload.update();
                }

                gs.error(checkThreshold.description);
                illumioScheduledJobsGr.logs +=
                    "\n[" +
                    new Date(new GlideDateTime().getNumericValue()).toISOString() +
                    "] " + checkThreshold.description;

                illumioScheduledJobsGr.job_status = "failed";

                illumioScheduledJobsGr.job_completed = new GlideDateTime();
                if (!illumioScheduledJobsGr.update()) {
                    gs.error("Error while updating process monitor.");
                }
                return;
            } else if (checkThreshold.hasError) {
                illumioScheduledJobsGr.logs +=
                    "\n[" +
                    new Date(new GlideDateTime().getNumericValue()).toISOString() +
                    "] " + checkThreshold.description;
                illumioScheduledJobsGr.current_operation =
                    "Synchronization with PCE Failed";

                illumioScheduledJobsGr.job_status = "failed";

                illumioScheduledJobsGr.job_completed = new GlideDateTime();
                if (!illumioScheduledJobsGr.update()) {
                    gs.error("Error while updating process monitor.");
                }

                return;
            }

            gs.info("Sync process started for PCE Configuration: {0}", configGr.getValue("name"));
            try {
                // Skip the operation if no workload to process
                if (
                    this.managedWorkloadsList.length +
                    this.unManagedWorkloadsList.length +
                    this.unknownWorkloadsList.length ==
                    0 &&
                    this.payloadSysIds.length == 0 && this.workloadsToDelete == 0
                ) {
                    gs.info("Auto synchronization : No unknown or inconsistent workload found for PCE Configuration {0}.", configGr.getValue("name"));
                    illumioScheduledJobsGr.logs +=
                        "\n[" +
                        new Date(new GlideDateTime().getNumericValue()).toISOString() +
                        '] Total critical label groups fetched : ' + count;
                    illumioScheduledJobsGr.logs +=
                        "\n[" +
                        new Date(new GlideDateTime().getNumericValue()).toISOString() +
                        "] No unknown or inconsistent workload found";

                    illumioScheduledJobsGr.logs += "\n[" + new Date(new GlideDateTime().getNumericValue()).toISOString() + "] Synchronization with PCE completed" + '\n -------------------------------------\nTotal workloads: ' + skippedWorkloads + '\n Created unknown workloads: ' + this.unknownWorkloadsList.length + '\n Updated managed workloads: ' + this.managedWorkloadsList.length + '\n Updated unmanaged workloads: ' + this.unManagedWorkloadsList.length + '\n Skipped workloads: ' + skippedWorkloads;
                    illumioScheduledJobsGr.current_operation =
                        "Synchronization with PCE completed";
                    illumioScheduledJobsGr.job_status = partial_success == "true" ? "partial_success" : "completed";
                    illumioScheduledJobsGr.job_completed = new GlideDateTime();
                    illumioScheduledJobsGr.update();
                    return;
                }
                this.addObjectToPayload(true, counter);

                // The probe parameters to the ECC request
                var parameters = {
                    autoSync: "true",
                    payloadSysIds: this.payloadSysIds + "",
                    jobSysId: illumioJobId,
                    partialSucc: partial_success,
                    skipped: skippedWorkloads,
                    count: countObject[configSysId],
                    operation: "updateCreate",
                    pce_url: pceConfig.pceUrl,
                    pce_secret: pceConfig.pceSecret,
                    pce_username: pceConfig.pceUsername,
                    pce_org_id: pceConfig.pceOrganizationID + "",
                    pce_authorization: gs.base64Encode(
                        pceConfig.pceUsername + ":" + pceConfig.pceSecret
                    ),
                    configSysId: configSysId,
                    time_zone: gs.getSession().getTimeZoneName(),
                    batch_size: gs.getProperty(
                        "x_illu2_illumio.bulk_operation_batch_size",
                        1000
                    ),
                    workloads_to_delete: JSON.stringify(retiredWorkloadsObject),
                    pce_mid_proxy: pceConfig.enable_pce_mid_proxy,
                    retry_params: JSON.stringify(pceConfig.retry_params)
                };
                // Add the request to ECC queue
                var illumioAddToECCQueue = new IllumioAddToECCQueue(
                    "IllumioUpdateWorkloads",
                    pceConfig.midServer,
                    parameters
                );
                illumioAddToECCQueue.insert();

                gs.info("Started auto synchronization for PCE Configuration {0}", configGr.getValue("name"));
            } catch (ex) {
                gs.error("Exception occurred while preparing request data. Exception", ex);
            }

        } catch (e) {
            gs.error("Exception occurred while syncing", e);
        }
    },

    /**
     * 
     * @param {JSON} workload_object Object of the workload
     * @param {JSON} labelsToMap Object of the labels to map
     * @returns updated object of the workload
     */
    getUseCreateLabelsList: function(configSysId, workloadObject, labelData) {
        var utils = new IllumioUtils();
        for (var labelType in labelData) {
            var labelCMDBValue = labelData[labelType];

            var labelsGr = new GlideRecord("x_illu2_illumio_illumio_pce_labels_mapping");
            labelsGr.addQuery("key", labelType);
            labelsGr.addQuery("value", labelCMDBValue);
            labelsGr.addQuery("illumio_pce_configuration", configSysId);
            labelsGr.query();
            var resp = utils.queryCaseSensitiveGr(labelsGr, 'value', labelCMDBValue, 'href');
            if (resp.found) {
                workloadObject.labels.push({
                    href: resp.returnValue,
                });
            } else {
                if (!gs.nil(labelCMDBValue)) {
                    workloadObject.createlabels.push({
                        key: labelType,
                        value: labelCMDBValue,
                    });
                }
            }
        }
        return workloadObject;
    },
    /**
     * this function will add the workload payload to table if couter exceeds or if its a last batch
     * @param {boolean} pushBundle
     * @param {number} objCounter
     */
    addObjectToPayload: function(pushBundle, objCounter) {
        objCounter++;

        var sys_id = "";

        if (objCounter >= this.maxSizeOfWorkloadPayload || pushBundle == true) {
            if (
                (this.managedWorkloadsList.length +
                    this.unManagedWorkloadsList.length +
                    this.unknownWorkloadsList.length + this.workloadsToDelete) !=
                0
            ) {
                var grPayload = new GlideRecord(
                    "x_illu2_illumio_illumio_autosync_payload"
                );
                grPayload.initialize();
                var payload = {
                    updateManaged: this.managedWorkloadsList,
                    updateUnManaged: this.unManagedWorkloadsList,
                    createUnknown: this.unknownWorkloadsList,
                    isAutoSync: true,
                };
                grPayload.payload = JSON.stringify(payload);
                sys_id = grPayload.insert();
                if (gs.nil(sys_id)) {
                    gs.error(
                        "[IllumioAutoSyncWithPCE] Error while inserting record in payload table"
                    );
                } else {
                    this.payloadSysIds.push(sys_id);
                    this.managedWorkloadsList = [];
                    this.unManagedWorkloadsList = [];
                    this.unknownWorkloadsList = [];
                    this.workloadsToDelete = 0;
                    objCounter = 0;
                }
            }
        }
        return objCounter;
    },
    type: "IllumioAutoSyncWithPCE",
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-10-01 06:20:45</sys_created_on>
        <sys_id>f14ad3f6db34274033c1a026ca96192e</sys_id>
        <sys_mod_count>325</sys_mod_count>
        <sys_name>IllumioAutoSyncWithPCE</sys_name>
        <sys_package display_value="Illumio" source="x_illu2_illumio">15314f1ddb882700dc9fabc5ca961943</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Illumio">15314f1ddb882700dc9fabc5ca961943</sys_scope>
        <sys_update_name>sys_script_include_f14ad3f6db34274033c1a026ca96192e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-03-28 07:16:48</sys_updated_on>
    </sys_script_include>
</record_update>
