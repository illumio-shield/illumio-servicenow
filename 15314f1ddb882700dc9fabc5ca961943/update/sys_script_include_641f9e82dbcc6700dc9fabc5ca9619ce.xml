<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_illu2_illumio.IllumioStartDiscovery</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>To start discovery of PCE data</description>
        <mobile_callable>false</mobile_callable>
        <name>IllumioStartDiscovery</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[var IllumioStartDiscovery = Class.create();
IllumioStartDiscovery.prototype = {
    initialize: function() {
        this.scheduledJobsGr = new GlideRecord(
            'x_illu2_illumio_illumio_scheduled_jobs'
        );
        this.utils = new x_illu2_illumio.IllumioUtils();
    },

    /**
     * Starts the discovery process
     * @returns {Boolean} true if the job is successfully created else false
     */
    process: function(configSysId) {
        var userName = gs.getUser().getID();
        // Check if any job is already in running state
        gs.info('Initiating Discovery');

        var configClassGr = new GlideRecord(
            'x_illu2_illumio_illumio_config_class_mapping'
        );
        configClassGr.addActiveQuery();
        configClassGr.addQuery(
            'illumio_pce_configuration',
            configSysId
        );
        configClassGr.query();
        while (configClassGr.next()) {
            var fieldMappingGr = new GlideRecord(
                'x_illu2_illumio_illumio_class_field_mapping'
            );
            fieldMappingGr.addQuery('illumio_config_class_mapping', configClassGr.getUniqueValue());
            fieldMappingGr.addQuery('type', 'host_name');
            fieldMappingGr.addActiveQuery();
            fieldMappingGr.setLimit(1);
            fieldMappingGr.query();
            if (!fieldMappingGr.hasNext()) {
                gs.error(
                    'Can not start the discovery as there is no PCE field mapping configured.'
                );
                this.scheduledJobsGr.illumio_pce_configuration = configSysId;
                this.scheduledJobsGr.job_started = new GlideDateTime();
                this.scheduledJobsGr.job_status = 'failed';
                this.scheduledJobsGr.current_operation =
                    'PCE Field Mapping Missing';
                this.scheduledJobsGr.job_type = 'data collection';
                this.scheduledJobsGr.job_completed = new GlideDateTime();
                this.scheduledJobsGr.logs =
                    '[' +
                    new Date(
                        new GlideDateTime().getNumericValue()
                    ).toISOString() +
                    '] Can not start the discovery as there is no PCE field mapping configured';
                this.scheduledJobsGr.insert();
                return false;
            }
            var runningJobsCount = new GlideAggregate(
                'x_illu2_illumio_illumio_scheduled_jobs'
            );
            runningJobsCount.addQuery('illumio_pce_configuration', configSysId);
            runningJobsCount.addQuery('job_status', 'running');
            runningJobsCount.addAggregate('COUNT');
            runningJobsCount.query();
            if (runningJobsCount.next()) {
                this.scheduledJobsGr.initialize();
                this.scheduledJobsGr.job_owner = userName;
                if (runningJobsCount.getAggregate('COUNT') > 0) {
                    gs.info(
                        'Can not start discovery as there is already one discovery job in running status.'
                    );
                    this.scheduledJobsGr.illumio_pce_configuration = configSysId;
                    this.scheduledJobsGr.job_started = new GlideDateTime();
                    this.scheduledJobsGr.job_status = 'failed';
                    this.scheduledJobsGr.current_operation = 'Already running';
                    this.scheduledJobsGr.job_type = 'data collection';
                    this.scheduledJobsGr.job_completed = new GlideDateTime();
                    this.scheduledJobsGr.logs =
                        '[' +
                        new Date(
                            new GlideDateTime().getNumericValue()
                        ).toISOString() +
                        '] Can not start discovery as there is already one discovery job in running status';
                    this.scheduledJobsGr.insert();
                    return false;
                } else {
                    // Create new job
                    this.scheduledJobsGr.illumio_pce_configuration = configSysId;
                    this.scheduledJobsGr.job_started = new GlideDateTime();
                    this.scheduledJobsGr.job_status = 'running';
                    this.scheduledJobsGr.current_operation =
                        'Fetching PCE data';
                    this.scheduledJobsGr.logs =
                        '[' +
                        new Date(
                            new GlideDateTime().getNumericValue()
                        ).toISOString() +
                        '] Illumio data collection started';
                    this.scheduledJobsGr.logs +=
                        '\n[' +
                        new Date(
                            new GlideDateTime().getNumericValue()
                        ).toISOString() +
                        '] Fetching PCE data';
                    this.scheduledJobsGr.job_type = 'data collection';
                    var jobSysId = this.scheduledJobsGr.insert();

                    var discoveryStartStatus = this.createAsyncJobs(jobSysId, configSysId);
                    if (!discoveryStartStatus) {
                        this.utils.handleFailure(
                            jobSysId,
                            'Discovery start error',
                            'Adding to ECC queue failed',
                            configSysId
                        );
                        return false;
                    }
                    return true;
                }
            }
        }
    },

    WORKLOAD_PARAMS: {
        keys_to_map: [
            'href',
            'hostname',
            'labels',
            'agent',
            'public_ip',
            'interfaces',
            'ven',
            'enforcement_mode',
            'os_id'
        ],
        primary_key_to_map: 'hostname',
    },
    LABEL_PARAMS: {
        keys_to_map: ['href', 'key', 'value'],
        primary_key_to_map: 'value',
    },

    /**
     * To create async jobs on PCE
     * @param {String} jobSysId - Job sys id
     * @returns {Boolean} true if the job is successfully created else false
     */
    createAsyncJobs: function(jobSysId, configSysId) {
        gs.info('Creating async jobs on PCE');
        var pceConfig = new IllumioGetPCEConfiguration().getConfiguration(configSysId);
        var types = ['workload', 'label'];

        if (pceConfig) {
            try {
                for (var typeIndex in types) {


                    if (this.utils.getCancelledJobStatus(jobSysId)) {
                        break;
                    }

                    var type = types[typeIndex];
                    var params = this[type.toUpperCase() + '_PARAMS'];
                    var parametersToSend = {
                        illumio_pce_configuration_id: configSysId,
                        pce_url: pceConfig.pceUrl,
                        pce_authorization: gs.base64Encode(
                            pceConfig.pceUsername + ':' + pceConfig.pceSecret
                        ),
                        pce_endpoint: '/api/v2/orgs/' +
                            (pceConfig.pceOrganizationID || '1') +
                            '/' +
                            type +
                            's',
                        operation: 'create_async_job',
                        mapping_table_name: 'x_illu2_illumio_illumio_pce_' + type + 's_mapping',
                        result_table_name: 'x_illu2_illumio_illumio_pce_' +
                            type +
                            's_mapping_stage',
                        keys_to_map: JSON.stringify(params['keys_to_map']),
                        primary_key_to_map: params['primary_key_to_map'],
                        illumio_scheduled_job_id: jobSysId,
                        job_identifier: type + 's',
                        time_zone: gs.getSession().getTimeZoneName(),
                        enable_pce_mid_proxy: pceConfig.enable_pce_mid_proxy,
                        retry_params: JSON.stringify(pceConfig.retry_params),
                        chunk_size: gs.getProperty("x_illu2_illumio.payload.batch.size", 1000)
                    };
                    var illumioAddToECCQueue = new IllumioAddToECCQueue(
                        'IllumioManageAsyncJobs',
                        pceConfig.midServer,
                        parametersToSend
                    );
                    var addToECCQueue = illumioAddToECCQueue.insert();

                    if (!addToECCQueue) {
                        this.utils.handleFailure(
                            jobSysId,
                            'Adding to ECC queue',
                            'Adding task for async job of fetching ' +
                            type +
                            's to ECC queue failed', configSysId
                        );
                        return false;
                    }
                    gs.info('Started async job to fetch PCE ' + type + 's');
                }


                if (this.utils.getCancelledJobStatus(jobSysId)) {
                    return false;
                }
                return true;
            } catch (e) {
                this.utils.handleFailure(
                    jobSysId,
                    'Adding to ECC queue failed',
                    'Exception occurred while adding to ECC queue. Exception: ' +
                    e, configSysId

                );
                return false;
            }
        } else {
            this.utils.handleFailure(
                jobSysId,
                'No PCE configuration found',
                'No PCE configurations available', configSysId
            );
            return false;
        }
    },

    type: 'IllumioStartDiscovery',
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-08-22 11:20:29</sys_created_on>
        <sys_id>641f9e82dbcc6700dc9fabc5ca9619ce</sys_id>
        <sys_mod_count>125</sys_mod_count>
        <sys_name>IllumioStartDiscovery</sys_name>
        <sys_package display_value="Illumio" source="x_illu2_illumio">15314f1ddb882700dc9fabc5ca961943</sys_package>
        <sys_policy/>
        <sys_scope display_value="Illumio">15314f1ddb882700dc9fabc5ca961943</sys_scope>
        <sys_update_name>sys_script_include_641f9e82dbcc6700dc9fabc5ca9619ce</sys_update_name>
        <sys_updated_by>hetang.modi</sys_updated_by>
        <sys_updated_on>2025-01-29 10:29:43</sys_updated_on>
    </sys_script_include>
</record_update>
