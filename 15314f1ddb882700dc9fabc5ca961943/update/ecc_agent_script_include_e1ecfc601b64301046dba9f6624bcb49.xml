<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="ecc_agent_script_include">
    <ecc_agent_script_include action="INSERT_OR_UPDATE">
        <active>true</active>
        <description/>
        <name>IllumioAuthenticateToPCE</name>
        <script><![CDATA[ms.include("IllumioMIDConstants");
var IllumioAuthenticateToPCE = Class.create();

IllumioAuthenticateToPCE.prototype = {
    initialize: function() {

        // set the parameters here
        this.logger = new IllumioLogUtil();
		
		//
		var url = String(ms.getConfigParameter("url"));
        if (url.charAt(url.length - 1) == '/') {
            url = url.substring(0, url.length - 1);
        }
        this.SNOWurl = url;
        this.SNOWusername = ms.getConfigParameter("mid.instance.username");
        this.SNOWpassword = ms.getConfigParameter("mid.instance.password");
		

        this.pceUrl = probe.getParameter('glide.jms.pce_url');
        this.pceEndpoint = probe.getParameter('glide.jms.pce_endpoint');
        this.pceAuthorization = probe.getParameter('glide.jms.pce_authorization');
        this.pceMIDProxy = probe.getParameter('glide.jms.enable_pce_mid_proxy');

        this.timeZone = probe.getParameter('glide.jms.time_zone');
        this.SimpleDF = Packages.java.text.SimpleDateFormat;
        this.TimeZone = Packages.java.util.TimeZone;

        this.illumio_job_id = probe.getParameter('glide.jms.illumio_scheduled_job_id');

        this.snowDateFormat = this.SimpleDF("yyyy-MM-dd HH:mm:ss");
        this.illumioDateFormat = this.SimpleDF("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");

        this.snowDateFormat.setTimeZone(this.TimeZone.getTimeZone('GMT'));
        this.illumioDateFormat.setTimeZone(this.TimeZone.getTimeZone('UTC'));

        this.utils = new IllumioPCEUtils(this.timeZone);
        this.protocol = this.utils.getPortFromUrl(this.pceUrl);

        this.retryParams = DEFAULT_RETRY_PARAMS;
        try {
            this.retryParams = JSON.parse(probe.getParameter('glide.jms.retry_params'));
        } catch (e) {
            this.logger._except('IllumioAuthenticateToPCE - Cannot parse the JSON of retry parameters');
        }

        var decodedAuth = this.utils.decodeBase64(this.pceAuthorization);
        decodedAuth = decodedAuth.split(":");
        this.pceUsername = decodedAuth[0];
        this.pcePassword = decodedAuth.slice(1).join(':');

        this.pceHttpClient = new IllumioHTTPClient(this.pceUrl, this.pceUsername, this.pcePassword, this.protocol, this.pceMIDProxy, this.retryParams);
    },

    run: function() {
		
		if(this.utils.checkCancelledJobStatus(this.illumio_job_id,this.SNOWurl,this.SNOWusername,this.SNOWpassword)){
			return false;
}
					
				
		
		
        if (this.utils.getMidConfigParam("mid.proxy.use_proxy")) {
            if (this.pceMIDProxy == "true") {
                this.utils._updateJobRecord(this.illumio_job_id, {
                    logs: ["Found a proxy configured between MID server and ServiceNow and MID server and the PCE",
                        "Validated the connectivity between MID server and ServiceNow through proxy",
                        "Validated the connectivity between MID server and the PCE through proxy"
                    ]
                });
            } else {
                this.utils._updateJobRecord(this.illumio_job_id, {
                    logs: ["Found a proxy configured between MID server and ServiceNow",
                        "Validated the connectivity between MID server and ServiceNow through proxy"
                    ]
                });
            }
        } else {
            if (this.pceMIDProxy == "true") {
                this.utils._updateJobRecord(this.illumio_job_id, {
                    logs: ["Proxy is not configured between MID server and the PCE", ]
                });
            }
        }
        this.utils._updateJobRecord(this.illumio_job_id, {
            logs: ["Checking connectivity between MID Server and the PCE (" + this.pceUrl + ")"]
        });


        // Authenticating using given authorization

        try {
			
			if(this.utils.checkCancelledJobStatus(this.illumio_job_id,this.SNOWurl,this.SNOWusername,this.SNOWpassword)){
				return false;
			}
					
			
            var response = this.pceHttpClient.get(this.pceEndpoint, '');
            this.logger._debug("Response code of authorization is: " + response.status);

            if (response.status != "200" && response.status != "202") {
                this.logger._error("Could not connect to PCE.");
                if (response.status == "401") {
                    this.utils.handleException("Authentication failed with PCE. Message: Invalid API Key/Secret/Organisation ID", this.illumio_job_id);
                } else if(response.status == "403") {
                    this.utils.handleException("Authentication failed with PCE. Message: Invalid Organisation ID", this.illumio_job_id);
                }else if (response.status == "0") {
                    this.utils.handleException("Authentication failed with PCE. Message: Cannot find PCE " + this.pceUrl, this.illumio_job_id);
                } else {
                    this.utils.handleException("Connectivity check to PCE failed. Response status code: " + response.status, this.illumio_job_id);
                }
                return false;
            }

            var payload = {
                job_status: 'completed',
                current_operation: 'Connectivity check successful',
                logs: ["Successfully authenticated the PCE credentials"],
                job_completed: this.snowDateFormat.format(new Date()) + ""
            };
            this.utils._updateJobRecord(this.illumio_job_id, payload);
            return true;
        } catch (exception) {
            this.logger._except('IllumioAuthenticateToPCE - Exception occurred while authenticating the PCE credentials. Exception: ' + exception);
            this.utils.handleException('Exception occurred while authenticating the PCE credentials. Exception: ' + exception, this.illumio_job_id);
        }
    },


    type: 'IllumioAuthenticateToPCE'
};]]></script>
        <sys_class_name>ecc_agent_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-06-01 13:46:21</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_id>e1ecfc601b64301046dba9f6624bcb49</sys_id>
        <sys_mod_count>87</sys_mod_count>
        <sys_name>IllumioAuthenticateToPCE</sys_name>
        <sys_overrides/>
        <sys_package display_value="Illumio" source="x_illu2_illumio">15314f1ddb882700dc9fabc5ca961943</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Illumio">15314f1ddb882700dc9fabc5ca961943</sys_scope>
        <sys_update_name>ecc_agent_script_include_e1ecfc601b64301046dba9f6624bcb49</sys_update_name>
        <sys_updated_by>hetang.modi</sys_updated_by>
        <sys_updated_on>2025-01-29 08:09:30</sys_updated_on>
    </ecc_agent_script_include>
</record_update>
