<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_illu2_illumio.IllumioThresholdLimit</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <mobile_callable>false</mobile_callable>
        <name>IllumioThresholdLimit</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[var IllumioThresholdLimit = Class.create();
IllumioThresholdLimit.prototype = {
    initialize: function() {},

    /**
     * Get the workload limit object for given Illumio PCE Configuration
     * @params {String} configSysId Illumio PCE Configuration sys_id.
     * @return {JSON} workload limit object
     */
    getThresholdLimit: function(configSysId) {
        try {
            var pceConfig = new IllumioGetPCEConfiguration().getConfiguration(configSysId);
            var utils = new IllumioUtils();

            var wlLimitObject = {
                "limitEnabled": false,
                isLimitEnabled: {
                    "update": false,
                    "create": false,
                    "delete": false,
                    "labelCreate": false
                },
                wlLimit: {
                    "update": 0,
                    "create": 0,
                    "delete": 0,
                    "labelCreate": 0
                },
                cancelJobOnLimitExceed: pceConfig.cancel_job_on_limit_exceed
            };

            if (pceConfig.enable_limit) {
                wlLimitObject["limitEnabled"] = true;
                var totalWorkloads = utils.getTotalRecords("x_illu2_illumio_illumio_pce_workload", configSysId);
                if (pceConfig.limit_on_label_creation) {

                    var totalLabels = utils.getTotalRecords("x_illu2_illumio_illumio_pce_labels_mapping", configSysId);
                    var labelLimit = parseInt(pceConfig.label_creation_limit);
                    if (pceConfig.label_creation_limit.includes("%")) {
                        labelLimit = Math.floor((totalLabels * parseInt(pceConfig.label_creation_limit) / 100));
                    }

                    wlLimitObject["isLimitEnabled"]["labelCreate"] = true;
                    wlLimitObject["wlLimit"]["labelCreate"] = labelLimit;
                }
                if (pceConfig.limit_on_wl_modification) {

                    var workloadLimit = parseInt(pceConfig.wl_modification_limit);
                    if (pceConfig.wl_modification_limit.includes("%")) {
                        workloadLimit = Math.floor((totalWorkloads * parseInt(pceConfig.wl_modification_limit) / 100));
                    }

                    wlLimitObject["isLimitEnabled"]["update"] = true;
                    wlLimitObject["wlLimit"]["update"] = workloadLimit;

                }
                if (pceConfig.limit_on_wl_creation) {
                    var ukwLimit = parseInt(pceConfig.wl_creation_limit);
                    if (pceConfig.wl_creation_limit.includes("%")) {
                        ukwLimit = Math.floor((totalWorkloads * parseInt(pceConfig.wl_creation_limit) / 100));
                    }

                    wlLimitObject["isLimitEnabled"]["create"] = true;
                    wlLimitObject["wlLimit"]["create"] = ukwLimit;
                }
                if (pceConfig.limit_on_wl_deletion) {
                    var delLimit = parseInt(pceConfig.wl_deletion_limit);
                    if (pceConfig.wl_deletion_limit.includes("%")) {
                        delLimit = Math.floor((totalWorkloads * parseInt(pceConfig.wl_deletion_limit) / 100));
                    }

                    wlLimitObject["isLimitEnabled"]["delete"] = true;
                    wlLimitObject["wlLimit"]["delete"] = delLimit;

                }

            }
        } catch (ex) {
            gs.error("[IllumioThresholdLimit] Exception occured while checking threshold limit. Exception", ex);
        } finally {
            return wlLimitObject;
        }

    },

    type: 'IllumioThresholdLimit'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-11-24 12:30:31</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>5ff69b63dbacac901206fd641d961959</sys_id>
        <sys_mod_count>51</sys_mod_count>
        <sys_name>IllumioThresholdLimit</sys_name>
        <sys_package display_value="Illumio" source="x_illu2_illumio">15314f1ddb882700dc9fabc5ca961943</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Illumio">15314f1ddb882700dc9fabc5ca961943</sys_scope>
        <sys_update_name>sys_script_include_5ff69b63dbacac901206fd641d961959</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-04-05 10:20:57</sys_updated_on>
    </sys_script_include>
</record_update>
