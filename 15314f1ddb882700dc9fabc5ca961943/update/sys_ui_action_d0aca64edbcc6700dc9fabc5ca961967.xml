<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_ui_action">
    <sys_ui_action action="INSERT_OR_UPDATE">
        <action_name>sysverb_new</action_name>
        <active>true</active>
        <client>true</client>
        <client_script_v2><![CDATA[function onClick(g_form) {

}]]></client_script_v2>
        <comments>Sync with PCE List</comments>
        <condition>gs.hasRole('x_illu2_illumio.illumio_user')</condition>
        <form_action>false</form_action>
        <form_button>false</form_button>
        <form_button_v2>false</form_button_v2>
        <form_context_menu>false</form_context_menu>
        <form_link>false</form_link>
        <form_menu_button_v2>false</form_menu_button_v2>
        <form_style/>
        <format_for_configurable_workspace>false</format_for_configurable_workspace>
        <hint/>
        <isolate_script>false</isolate_script>
        <list_action>true</list_action>
        <list_banner_button>true</list_banner_button>
        <list_button>false</list_button>
        <list_choice>false</list_choice>
        <list_context_menu>false</list_context_menu>
        <list_link>false</list_link>
        <list_save_with_form_button>false</list_save_with_form_button>
        <list_style/>
        <messages/>
        <name>Sync selected servers with PCE</name>
        <onclick>doSyncWithPCE()</onclick>
        <order>100</order>
        <script><![CDATA[function doSyncWithPCE() {

    // Get the sys ids of the selected workloads.
    var checkedRecordsSysID = g_list.getChecked();
    var checkedRecordsObject = {},
        checkedRecordsData, selectedRecordsObject = {},
        countObject = {},
        configSysIds = [],
        totalRecordsToSync = 0;
    var createScheduledJobCount = 0,
        errorInScheduledJobCreation = false;
    var instanceURL, jobSysIdObject = {};
    var selectedRecordsData = [],
        gaCustomTableData, dialog, answer, thresoldLimitLogs = {}, // FIXME: Typo in the thresoldLimitLogs variable name
        limitExceeded = false;

    var userName = g_user.firstName + " " + g_user.lastName;

    // Start the sync process.
    var loadingDialog = new GlideModal();
    loadingDialog.setTitle("Starting sync process");
    loadingDialog.setWidth(400);
    loadingDialog.renderWithContent(
        '<html><body><div class="row loading-container" id="loadingDialog"><label style="font-size: medium;">Validating Sync process...</label><br /><div class="loading-indicator icon-loading icon-lg"></div></div></html>'
    );

    gaCustomTableData = new GlideAjax("GetLabelGroupsAjax");
    gaCustomTableData.addParam("sysparm_name", "filterRecords");
    gaCustomTableData.addParam("sysparm_sys_ids", checkedRecordsSysID);
    gaCustomTableData.getXML(gaParseIdResponse);

    function gaParseIdResponse(response) {
        answer = response.responseXML.documentElement.getAttribute("answer");
        answer = JSON.parse(answer);
        selectedRecordsObject = answer.data;
		if (answer.count == 0) {
			loadingDialog.destroy();
			dialog = new GlideDialogWindow("x_illu2_illumio_IllumioInfoPopup");
			dialog.setTitle("Cannot start data sync process as the selected workloads do not have a conflict.");
			dialog.render();
			return;
		}
        configSysIds = Object.keys(selectedRecordsObject);
        fetchDataFromPCE();
    }

    function fetchDataFromPCE() {
        gaCustomTableData = new GlideAjax("GetLabelGroupsAjax");
        gaCustomTableData.addParam("sysparm_name", "fetchCriticalLabels");
        gaCustomTableData.addParam("sysparm_config_sys_ids", JSON.stringify(configSysIds));
        gaCustomTableData.getXML(gaParseResponse);

        function gaParseResponse(response) {
            answer = response.responseXML.documentElement.getAttribute("answer");
            var responseDict = JSON.parse(answer);
            if (!responseDict.status) {
                var message = "Cannot start data sync process for PCE Configuration(s) - " + responseDict["failedConfigurations"].join(", ") + ". Please check application logs.";
                loadingDialog.destroy();
                dialog = new GlideDialogWindow("x_illu2_illumio_IllumioInfoPopup");
                dialog.setTitle(message);
                dialog.render();
                return;
            }
            excludeWorkloads();
        }
    }

    function excludeWorkloads() {
        gaCustomTableData = new GlideAjax("GetLabelGroupsAjax");
        gaCustomTableData.addParam("sysparm_name", "excludeWorkloadsWithCriticalLabels");
        gaCustomTableData.addParam("sysparm_selected_record_object", JSON.stringify(selectedRecordsObject));
        gaCustomTableData.getXML(gaParseLResponse);

        // Callback function for AJAX call to IllumioGetCustomTableRecord
        function gaParseLResponse(response) {
            answer = response.responseXML.documentElement.getAttribute("answer");
            answer = JSON.parse(answer);
            checkedRecordsObject = answer.filteredRecords;
            totalRecordsToSync = answer.totalRecords;
            getLabelGroupsCount();
        }
    }

    function getLabelGroupsCount() {
        gaCustomTableData = new GlideAjax('GetLabelGroupsAjax');
        gaCustomTableData.addParam('sysparm_name', 'countCriticalGroupsFetched');
        gaCustomTableData.addParam('sysparm_config_sys_ids', JSON.stringify(configSysIds));
        gaCustomTableData.getXML(gaParseLCResponse);

        function gaParseLCResponse(response) {
            answer = response.responseXML.documentElement.getAttribute("answer");
            countObject = JSON.parse(answer);
            getCustomtableRecord();
        }
    }

    function getCustomtableRecord() {
        loadingDialog.destroy();
        if (totalRecordsToSync == 0) {
            var dialogModal = new GlideDialogWindow("x_illu2_illumio_IllumioInfoPopup");
            dialogModal.setTitle("Cannot start data sync process as all selected workloads have a critical label associated with them.");
            dialogModal.render();
            return;
        }

        gaCustomTableData = new GlideAjax("IllumioGetCustomTableRecord");
        gaCustomTableData.addParam("sysparm_name", "getData");
        gaCustomTableData.addParam("sysparm_checked_records_object", JSON.stringify(checkedRecordsObject));
        gaCustomTableData.getXML(gaParseTableResponse);

        // Callback function for AJAX call to IllumioGetCustomTableRecord        
        function gaParseTableResponse(response) {
            answer = response.responseXML.documentElement.getAttribute("answer");
            answer = JSON.parse(answer);
            checkedRecordsData = answer.data.filteredRecords;
            totalRecordsToSync = answer.data.totalRecords;
            instanceURL = answer.instanceURL;
            thresoldLimitLogs = answer.data.logMessage;
            limitExceeded = answer.data.limitExceeded;

            // Display the message to the user if the cancel job flag is true and threshold limit exceeds and end the sync process.
            if (answer.data.cancelJobOnLimitExceed) {
                dialog = new GlideDialogWindow("x_illu2_illumio_IllumioInfoPopup");
                dialog.setTitle("Cannot start the sync process as the threshold limit has been exceeded for one or more configurations.");
                dialog.render();

                // NOTE: Can end the flow here if the cancel job checkbox is checked and the threshold limit is exceeded.
            }

            preparePayload();
        }
    }

    /**
     * Generate the managed and unmanaged workloads' list
     * Make AJAX call to forward the processed workload objects after fetching their labels' details
     */
    function preparePayload() {
        var dialogModal;

        // The flow ends if there are no valid workloads to sync.
        if (totalRecordsToSync == 0) {
            dialogModal = new GlideDialogWindow("x_illu2_illumio_IllumioInfoPopup");
            if (limitExceeded)
                dialogModal.setTitle("Cannot start the sync process as the threshold limit has been exceeded for one or more configurations.");
            else
                dialogModal.setTitle("No valid workloads are selected. Please select the workloads which are not marked as duplicate and have conflicts.");
            dialogModal.render();
            return false;
        }

        for (var configSysId in checkedRecordsData) {
            selectedRecordsData = checkedRecordsData[configSysId];
            var validWorkloadsCount = selectedRecordsData.length;
            if (validWorkloadsCount != 0) {
                createScheduledJobCount += 1;
                createScheduledJob(configSysId, validWorkloadsCount);
            }
        }
    }

    function createScheduledJob(configSysId, validWorkloads) {
        // Creating new data sync job
        var createJob = new GlideAjax("IllumioManageJobs");
        createJob.addParam("sysparm_name", "createScheduledJob");
        createJob.addParam("sysparm_job_status", "running");
        createJob.addParam("sysparm_type_flag", "false");
        createJob.addParam("sysparm_config_sys_id", configSysId);
        createJob.addParam(
            "sysparm_current_operation",
            "Sync process for " + validWorkloads + " workload(s) has started"
        );
        createJob.addParam(
            "sysparm_logs",
            "Sync process for " + validWorkloads + " workload(s) has started"
        );
        if (thresoldLimitLogs[configSysId]) {
            createJob.addParam("sysparm_thresold_logs", thresoldLimitLogs[configSysId]);
        }

        createJob.addParam("sysparm_job_type", "data sync");
        createJob.getXML(gaGetJobSysID);

        // Callback function for AJAX call to IllumioManageJobs
        function gaGetJobSysID(response) {
            var jobSysId = response.responseXML.documentElement.getAttribute("answer");
            createScheduledJobCount -= 1;

            // Check if sceduled job is created or not
            if (jobSysId == null) {
                errorInScheduledJobCreation = true;
            } else {
                jobSysIdObject[configSysId] = jobSysId;
                processWorkloads(configSysId);
            }

            if (createScheduledJobCount == 0) {
                var message = "Sync process started";
                if (errorInScheduledJobCreation)
                    message = "Can not start data sync process for some of the configurations as there is data collection in running state. Please check logs for more details.";

                dialog = new GlideDialogWindow("x_illu2_illumio_IllumioInfoPopup");
                dialog.setTitle(message);
                dialog.render();
            }
        }
    }

    function processWorkloads(configSysId) {
        var partial_succ = "false";

        var combinedWorkloads = {
            createUnknown: [],
            updateManaged: [],
            updateUnManaged: [],
        };

        selectedRecordsData = checkedRecordsData[configSysId];
        for (var index = 0; index < selectedRecordsData.length; index++) {
            var workloadObject = selectedRecordsData[index];
            workloadObject["href"] = workloadObject.pce_workload_href;
            if (workloadObject.known_to_pce == "unknown") {
                // Create operation
                workloadObject["description"] =
                    "Created by " +
                    userName +
                    " [" + instanceURL + "] at " +
                    new Date().toLocaleString();

                combinedWorkloads["createUnknown"].push(workloadObject);
            } else if (workloadObject.known_to_pce == "managed") {
                // Update operation
                workloadObject["description"] =
                    "Updated by " +
                    userName +
                    " [" + instanceURL + "] at " +
                    new Date().toLocaleString();

                combinedWorkloads["updateManaged"].push(workloadObject);
            } else if (workloadObject.known_to_pce == "unmanaged") {
                // Update operation
                workloadObject["description"] =
                    "Updated by " +
                    userName +
                    " [" + instanceURL + "] at " +
                    new Date().toLocaleString();

                combinedWorkloads["updateUnManaged"].push(workloadObject);
            }
        }

        var skipCount = selectedRecordsObject[configSysId].length - checkedRecordsObject[configSysId].length;

        if (thresoldLimitLogs[configSysId])
            partial_succ = "true";

        var ga_update = new GlideAjax("IllumioUpdatePCE");
        ga_update.addParam("sysparm_name", "action");
        ga_update.addParam("sysparm_operation", "updateCreate");
        ga_update.addParam("sysparm_skipped_count", skipCount + "");
        ga_update.addParam("sysparm_jobSysId", jobSysIdObject[configSysId]);
        ga_update.addParam("sysparm_config_sys_id", configSysId);
        ga_update.addParam("sysparm_partial", partial_succ);
        ga_update.addParam("sysparm_count", countObject[configSysId] + "");
        ga_update.addParam("sysparm_custom_record_sys_id", checkedRecordsObject[configSysId]);
        ga_update.addParam("sysparm_payload", JSON.stringify(combinedWorkloads));
        ga_update.getXML();
    }
}]]></script>
        <show_insert>true</show_insert>
        <show_multiple_update>false</show_multiple_update>
        <show_query>false</show_query>
        <show_update>true</show_update>
        <sys_class_name>sys_ui_action</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-08-22 12:20:20</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>d0aca64edbcc6700dc9fabc5ca961967</sys_id>
        <sys_mod_count>352</sys_mod_count>
        <sys_name>Sync selected servers with PCE</sys_name>
        <sys_overrides/>
        <sys_package display_value="Illumio" source="x_illu2_illumio">15314f1ddb882700dc9fabc5ca961943</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Illumio">15314f1ddb882700dc9fabc5ca961943</sys_scope>
        <sys_update_name>sys_ui_action_d0aca64edbcc6700dc9fabc5ca961967</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-05-15 11:19:04</sys_updated_on>
        <table>x_illu2_illumio_illumio_pce_workload</table>
        <ui11_compatible>true</ui11_compatible>
        <ui16_compatible>true</ui16_compatible>
    </sys_ui_action>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>d0aca64edbcc6700dc9fabc5ca961967</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-05-15 06:36:16</sys_created_on>
        <sys_id>2832338983a9221058f2f496feaad3f2</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-05-15 06:36:16</sys_updated_on>
        <table>sys_ui_action</table>
        <use_es_latest>false</use_es_latest>
    </sys_es_latest_script>
</record_update>
