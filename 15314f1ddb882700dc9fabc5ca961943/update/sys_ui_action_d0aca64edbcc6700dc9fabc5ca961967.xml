<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_ui_action">
    <sys_ui_action action="INSERT_OR_UPDATE">
        <action_name>sysverb_new</action_name>
        <active>true</active>
        <client>true</client>
        <client_script_v2><![CDATA[function onClick(g_form) {

}]]></client_script_v2>
        <comments>Sync with PCE List</comments>
        <condition>gs.hasRole('x_illu2_illumio.illumio_user')</condition>
        <form_action>false</form_action>
        <form_button>false</form_button>
        <form_button_v2>false</form_button_v2>
        <form_context_menu>false</form_context_menu>
        <form_link>false</form_link>
        <form_menu_button_v2>false</form_menu_button_v2>
        <form_style/>
        <format_for_configurable_workspace>false</format_for_configurable_workspace>
        <hint/>
        <isolate_script>false</isolate_script>
        <list_action>true</list_action>
        <list_banner_button>true</list_banner_button>
        <list_button>false</list_button>
        <list_choice>false</list_choice>
        <list_context_menu>false</list_context_menu>
        <list_link>false</list_link>
        <list_save_with_form_button>false</list_save_with_form_button>
        <list_style/>
        <messages/>
        <name>Sync selected servers with PCE</name>
        <onclick>doSyncWithPCE()</onclick>
        <order>100</order>
        <script><![CDATA[function doSyncWithPCE() {

    // get the selected workloads
    var checkedRecordsSysID = g_list.getChecked();

    var checkedRecordsObject = {},
        checkedRecordsData, selectedRecordsObject = {},
        countObject = {},
        configSysIds = [],
		validSelectedRecordsCount = 0,
        totalRecordsToSync = 0;
    var isLimitExceedMessageRendered = false,
        createScheduledJobCount = 0,
        errorInScheduledJobCreation = false;
    var labelsToCreate, instanceURL, jobSysIdObject = {},
        combinedWorkloads = {};
    var partial_succ = "false";
    var selectedRecordsData = [],
        gaCustomTableData, dialog, answer;

    var userName = g_user.firstName + " " + g_user.lastName;

    // start sync process
    var loadingDialog = new GlideModal();
    loadingDialog.setTitle("Starting sync process");
    loadingDialog.setWidth(400);
    loadingDialog.renderWithContent(
        '<html><body><div class="row loading-container" id="loadingDialog"><label style="font-size: medium;">Validating Sync process...</label><br /><div class="loading-indicator icon-loading icon-lg"></div></div></html>'
    );

    gaCustomTableData = new GlideAjax("GetLabelGroupsAjax");
    gaCustomTableData.addParam("sysparm_name", "filterRecords");
    gaCustomTableData.addParam("sysparm_sys_ids", checkedRecordsSysID);
    gaCustomTableData.getXML(gaParseIdResponse);

    function gaParseIdResponse(response) {
        answer = response.responseXML.documentElement.getAttribute("answer");
        answer = JSON.parse(answer);
        selectedRecordsObject = answer.data;
		validSelectedRecordsCount = answer.count;
        configSysIds = Object.keys(selectedRecordsObject);
        fetchDataFromPCE();
    }

    function fetchDataFromPCE() {
        gaCustomTableData = new GlideAjax("GetLabelGroupsAjax");
        gaCustomTableData.addParam("sysparm_name", "fetchCriticalLabels");
        gaCustomTableData.addParam("sysparm_config_sys_ids", JSON.stringify(configSysIds));
        gaCustomTableData.getXML(gaParseResponse);

        function gaParseResponse(response) {
            answer = response.responseXML.documentElement.getAttribute("answer");
            var responseDict = JSON.parse(answer);
            if (!responseDict.status) {
                loadingDialog.destroy();
                dialog = new GlideDialogWindow("x_illu2_illumio_IllumioInfoPopup");
                dialog.setTitle(
                    "Can not start data sync process as MID server is down for configurations - " + responseDict["failedConfigurations"].join(", ")
                );
                dialog.render();
                return;
            }
            excludeWorkloads();
        }
    }

    function excludeWorkloads() {
        gaCustomTableData = new GlideAjax("GetLabelGroupsAjax");
        gaCustomTableData.addParam("sysparm_name", "excludeWorkloadsWithCriticalLabels");
        gaCustomTableData.addParam("sysparm_selected_record_object", JSON.stringify(selectedRecordsObject));
        gaCustomTableData.getXML(gaParseLResponse);


        // Callback function for AJAX call to IllumioGetCustomTableRecord
        function gaParseLResponse(response) {
            answer = response.responseXML.documentElement.getAttribute("answer");
            answer = JSON.parse(answer);
            checkedRecordsObject = answer.filteredRecords;
            totalRecordsToSync = answer.totalRecords;
            getLabelGroupsCount();
        }
    }

    function getLabelGroupsCount() {
        gaCustomTableData = new GlideAjax('GetLabelGroupsAjax');
        gaCustomTableData.addParam('sysparm_name', 'countCriticalGroupsFetched');
        gaCustomTableData.addParam('sysparm_config_sys_ids', JSON.stringify(configSysIds));
        gaCustomTableData.getXML(gaParseLCResponse);

        function gaParseLCResponse(response) {
            answer = response.responseXML.documentElement.getAttribute("answer");
            countObject = JSON.parse(answer);
            getCustomtableRecord();
        }
    }

    function getCustomtableRecord() {
        loadingDialog.destroy();
		
        if (totalRecordsToSync < validSelectedRecordsCount) {
            var dialog = new GlideDialogWindow("x_illu2_illumio_IllumioInfoPopup");
            dialog.setTitle("Cannot sync a workload that has a critical label.");
            dialog.render();
            return;
        }

        gaCustomTableData = new GlideAjax("IllumioGetCustomTableRecord");
        gaCustomTableData.addParam("sysparm_name", "getData");
        gaCustomTableData.addParam("sysparm_checked_records_object", JSON.stringify(checkedRecordsObject));
        gaCustomTableData.getXML(gaParseTableResponse);

        // Callback function for AJAX call to IllumioGetCustomTableRecord         
        function gaParseTableResponse(response) {
            answer = response.responseXML.documentElement.getAttribute("answer");
            answer = JSON.parse(answer);
            checkedRecordsData = answer.filteredRecords;
            totalRecordsToSync = answer.totalRecords;
            getLabelCounter();
        }
    }

    function getLabelCounter() {
        var gaLabel = new GlideAjax("GetLabelGroupsAjax");
        gaLabel.addParam("sysparm_name", "getCreateLabelCounter");
        gaLabel.addParam("sysparm_checkedRecordsData", JSON.stringify(checkedRecordsData));
        gaLabel.getXML(processLabelCounter);

        function processLabelCounter(response1) {
            answer = response1.responseXML.documentElement.getAttribute("answer");
            answer = JSON.parse(answer);
            if (answer.hasError) {
                dialog = new GlideDialogWindow("x_illu2_illumio_IllumioInfoPopup");
                dialog.setTitle(answer.message);
                dialog.render();
                return;
            }

            labelsToCreate = answer.counterObject;
            instanceURL = answer.instanceURL;
            preparePayload();

        }
    }

    /**
     * Generate the managed and unmanaged workloads' list
     * Make AJAX call to forward the processed workload objects after fetching their labels' details
     */
    function preparePayload() {
        var dialog, wlToModify = 0,
            wlToCreate = 0,
            containsValidRecords = false;
        if (totalRecordsToSync == 0) {
            dialog = new GlideDialogWindow("x_illu2_illumio_IllumioInfoPopup");
            dialog.setTitle("No valid workload selected.");
            dialog.render();
            return false;
        }
        for (var configSysId in checkedRecordsData) {

            selectedRecordsData = checkedRecordsData[configSysId];
            wlToModify = 0;
            wlToCreate = 0;
            for (var index = 0, len = selectedRecordsData.length; index < len; index++) {

                // set operation based on type of workload
                if (selectedRecordsData[index]["known_to_pce"] == "managed" || selectedRecordsData[index]["known_to_pce"] == "unmanaged") {
                    selectedRecordsData[index]["operation"] = "update";
                    wlToModify++;
                } else {
                    selectedRecordsData[index]["operation"] = "create";
                    wlToCreate++;
                }
            }

            // If there is no workload selected
            if (wlToModify + wlToCreate != 0) {
                containsValidRecords = true;
                var gaThreshold = new GlideAjax("GetLabelGroupsAjax");
                gaThreshold.addParam("sysparm_name", "checkThresholdLimit");
                gaThreshold.addParam('sysparm_labelsToCreate', labelsToCreate[configSysId] + '');
                gaThreshold.addParam('sysparm_wlToModify', wlToModify + '');
                gaThreshold.addParam('sysparm_workloadToCreate', wlToCreate + '');
                gaThreshold.addParam('sysparm_pceConfigSysId', configSysId);
                gaThreshold.getXML(function(response) {
                    answer = response.responseXML.documentElement.getAttribute("answer");
                    answer = JSON.parse(answer);
                    if (!answer.limitExceed) {
                        createScheduledJobCount += 1;
                        createScheduledJob(answer.configSysId, answer.wlToModify + answer.wlToCreate);
                    } else if (!isLimitExceedMessageRendered) {
                        isLimitExceedMessageRendered = true;
                        dialog = new GlideDialogWindow("x_illu2_illumio_IllumioInfoPopup");
                        dialog.setTitle("Limits have exceeded please check logs for more details");
                        dialog.render();
                    }
                });
            }
        }

        if (!containsValidRecords) {
            dialog = new GlideDialogWindow("x_illu2_illumio_IllumioInfoPopup");
            dialog.setTitle("No valid workload selected.");
            dialog.render();
        }
    }

    function createScheduledJob(configSysId, validWorkloads) {

        // set global object
        if (!combinedWorkloads[configSysId]) {
            combinedWorkloads[configSysId] = {
                createUnknown: [],
                updateManaged: [],
                updateUnManaged: [],
            };
        }

        //Creating new data sync job
        var createJob = new GlideAjax("IllumioManageJobs");
        createJob.addParam("sysparm_name", "createScheduledJob");
        createJob.addParam("sysparm_job_status", "running");
        createJob.addParam("sysparm_type_flag", "false");
        createJob.addParam("sysparm_config_sys_id", configSysId);
        createJob.addParam(
            "sysparm_current_operation",
            "Sync process for " + validWorkloads + " workload(s) has started"
        );
        createJob.addParam(
            "sysparm_logs",
            "Sync process for " + validWorkloads + " workload(s) has started"
        );
        createJob.addParam("sysparm_job_type", "data sync");
        createJob.getXML(gaGetJobSysID);

        // Callback function for AJAX call to IllumioManageJobs
        function gaGetJobSysID(response) {
            var jobSysId = response.responseXML.documentElement.getAttribute("answer");
            createScheduledJobCount -= 1;

            // Check if sceduled job is created or not
            if (jobSysId == null) {
                errorInScheduledJobCreation = true;
            } else {
                jobSysIdObject[configSysId] = jobSysId;
                processWorkloads(configSysId);
            }

            if (createScheduledJobCount == 0) {
                var message = "Sync process started";
                if (errorInScheduledJobCreation)
                    message = "Can not start data sync process for some of the configurations as there is data collection in running state. Please check logs for more details."

                dialog = new GlideDialogWindow("x_illu2_illumio_IllumioInfoPopup");
                dialog.setTitle(message);
                dialog.render();
            }
        }

    }

    function processWorkloads(configSysId) {

        selectedRecordsData = checkedRecordsData[configSysId];
        for (var index = 0; index < selectedRecordsData.length; index++) {
            gaCustomTableData = new GlideAjax("IllumioPrepareWorkload");
            gaCustomTableData.addParam("sysparm_name", "getHrefs");
            gaCustomTableData.addParam("sysparm_config_sys_id", configSysId);
            gaCustomTableData.addParam(
                "sysparm_workload",
                JSON.stringify(selectedRecordsData[index])
            );

            gaCustomTableData.getXML(function(response) {
                gaParseLabelsResponse(response, configSysId, combinedWorkloads);
            });
        }
    }

    // Get the label details for a PCE and push the workload to the global list     
    function gaParseLabelsResponse(response, configSysId, combinedWorkloads) {
        var limit = checkedRecordsData[configSysId].length;
        answer = JSON.parse(
            response.responseXML.documentElement.getAttribute("answer")
        );

        // The object to be pushed to the global list
        var workload_object = {
            href: answer.workload.pce_workload_href,
            hostname: answer.workload.hostname,
            sys_id: answer.workload.sys_id,
            labels: answer.workload.labels,
            createlabels: answer.workload.createlabels,
            source_table: answer.workload.source_table,
            updateFields: answer.workload.updateFields
        };

        if (answer.workload.known_to_pce == "unknown") {
            // create operation 

            workload_object["description"] =
                "Created by " +
                userName +
                " [" + instanceURL + "] at " +
                new Date().toLocaleString();

            workload_object["ip_address"] = answer.workload.ip_address;
            workload_object["interfaces"] = answer.workload.interfaces;
            combinedWorkloads[configSysId]["createUnknown"].push(workload_object);

        } else if (answer.workload.known_to_pce == "managed") {
            // Update operation

            workload_object["description"] =
                "Updated by " +
                userName +
                " [" + instanceURL + "] at " +
                new Date().toLocaleString();

            combinedWorkloads[configSysId]["updateManaged"].push(workload_object);

        } else if (answer.workload.known_to_pce == "unmanaged") {
            // Update operation

            workload_object["description"] =
                "Updated by " +
                userName +
                " [" + instanceURL + "] at " +
                new Date().toLocaleString();

            workload_object["ip_address"] = answer.workload.ip_address;
            workload_object["interfaces"] = answer.workload.interfaces;
            workload_object["known_to_pce"] = answer.workload.known_to_pce;
            combinedWorkloads[configSysId]["updateUnManaged"].push(workload_object);
        }

        var skipCount = selectedRecordsObject[configSysId].length - checkedRecordsObject[configSysId].length;
        if (skipCount > 0)
            partial_succ = "true";
        if (limit == combinedWorkloads[configSysId]["createUnknown"].length + combinedWorkloads[configSysId]["updateManaged"].length + combinedWorkloads[configSysId]["updateUnManaged"].length) {
            var ga_update = new GlideAjax("IllumioUpdatePCE");
            ga_update.addParam("sysparm_name", "action");
            ga_update.addParam("sysparm_operation", "updateCreate");
            ga_update.addParam("sysparm_skipped_count", skipCount + "");
            ga_update.addParam("sysparm_jobSysId", jobSysIdObject[configSysId]);
            ga_update.addParam("sysparm_config_sys_id", configSysId);
            ga_update.addParam("sysparm_partial", partial_succ);
            ga_update.addParam("sysparm_count", countObject[configSysId] + "");
            ga_update.addParam("sysparm_custom_record_sys_id", checkedRecordsObject[configSysId]);
            ga_update.addParam("sysparm_payload", JSON.stringify(combinedWorkloads[configSysId]));
            ga_update.getXML();
        }
    }
}]]></script>
        <show_insert>true</show_insert>
        <show_multiple_update>false</show_multiple_update>
        <show_query>false</show_query>
        <show_update>true</show_update>
        <sys_class_name>sys_ui_action</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-08-22 12:20:20</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>d0aca64edbcc6700dc9fabc5ca961967</sys_id>
        <sys_mod_count>332</sys_mod_count>
        <sys_name>Sync selected servers with PCE</sys_name>
        <sys_overrides/>
        <sys_package display_value="Illumio" source="x_illu2_illumio">15314f1ddb882700dc9fabc5ca961943</sys_package>
        <sys_policy/>
        <sys_scope display_value="Illumio">15314f1ddb882700dc9fabc5ca961943</sys_scope>
        <sys_update_name>sys_ui_action_d0aca64edbcc6700dc9fabc5ca961967</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-03-28 11:59:31</sys_updated_on>
        <table>x_illu2_illumio_illumio_pce_workload</table>
        <ui11_compatible>true</ui11_compatible>
        <ui16_compatible>true</ui16_compatible>
    </sys_ui_action>
</record_update>
